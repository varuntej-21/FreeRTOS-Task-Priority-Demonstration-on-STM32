
tinkk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a84  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004c24  08004c24  00005c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cac  08004cac  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004cac  08004cac  00005cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cb4  08004cb4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cb4  08004cb4  00005cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cb8  08004cb8  00005cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004cbc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c0  2000000c  08004cc8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049cc  08004cc8  000069cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012930  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d3c  00000000  00000000  0001896c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001b6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8e  00000000  00000000  0001c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002be7  00000000  00000000  0001d5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012807  00000000  00000000  000201b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097a60  00000000  00000000  000329bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca41c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c4  00000000  00000000  000ca460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000cee24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c0c 	.word	0x08004c0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	08004c0c 	.word	0x08004c0c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
void Task1_Function(void *argument);
void Task2_Function(void *argument);

/* Main ----------------------------------------------------------------------*/
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000510:	f000 fa46 	bl	80009a0 <HAL_Init>
  SystemClock_Config();
 8000514:	f000 f8b4 	bl	8000680 <SystemClock_Config>
  MX_GPIO_Init();
 8000518:	f000 f910 	bl	800073c <MX_GPIO_Init>

  osKernelInitialize();
 800051c:	f001 fc3a 	bl	8001d94 <osKernelInitialize>

  /* Create tasks */
  Task1Handle = osThreadNew(Task1_Function, NULL, &Task1_attributes);
 8000520:	4a09      	ldr	r2, [pc, #36]	@ (8000548 <main+0x3c>)
 8000522:	2100      	movs	r1, #0
 8000524:	4809      	ldr	r0, [pc, #36]	@ (800054c <main+0x40>)
 8000526:	f001 fc7f 	bl	8001e28 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a08      	ldr	r2, [pc, #32]	@ (8000550 <main+0x44>)
 800052e:	6013      	str	r3, [r2, #0]
  Task2Handle = osThreadNew(Task2_Function, NULL, &Task2_attributes);
 8000530:	4a08      	ldr	r2, [pc, #32]	@ (8000554 <main+0x48>)
 8000532:	2100      	movs	r1, #0
 8000534:	4808      	ldr	r0, [pc, #32]	@ (8000558 <main+0x4c>)
 8000536:	f001 fc77 	bl	8001e28 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a07      	ldr	r2, [pc, #28]	@ (800055c <main+0x50>)
 800053e:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8000540:	f001 fc4c 	bl	8001ddc <osKernelStart>

  while (1) {}
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x38>
 8000548:	08004c4c 	.word	0x08004c4c
 800054c:	08000561 	.word	0x08000561
 8000550:	20000028 	.word	0x20000028
 8000554:	08004c70 	.word	0x08004c70
 8000558:	080005f1 	.word	0x080005f1
 800055c:	2000002c 	.word	0x2000002c

08000560 <Task1_Function>:
}

/* Task1: LED on PA2 */
void Task1_Function(void *argument)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  for (;;)
  {
    osPriority_t p1 = osThreadGetPriority(Task1Handle);
 8000568:	4b1e      	ldr	r3, [pc, #120]	@ (80005e4 <Task1_Function+0x84>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fced 	bl	8001f4c <osThreadGetPriority>
 8000572:	60f8      	str	r0, [r7, #12]
    osPriority_t p2 = osThreadGetPriority(Task2Handle);
 8000574:	4b1c      	ldr	r3, [pc, #112]	@ (80005e8 <Task1_Function+0x88>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f001 fce7 	bl	8001f4c <osThreadGetPriority>
 800057e:	60b8      	str	r0, [r7, #8]

    if (p1 > p2)
 8000580:	68fa      	ldr	r2, [r7, #12]
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	429a      	cmp	r2, r3
 8000586:	dd12      	ble.n	80005ae <Task1_Function+0x4e>
    {
      /* Task1 dominates: suspend Task2, keep PA3 OFF */
      osThreadSuspend(Task2Handle);
 8000588:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <Task1_Function+0x88>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fcfa 	bl	8001f86 <osThreadSuspend>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2108      	movs	r1, #8
 8000596:	4815      	ldr	r0, [pc, #84]	@ (80005ec <Task1_Function+0x8c>)
 8000598:	f000 fc96 	bl	8000ec8 <HAL_GPIO_WritePin>

      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 800059c:	2104      	movs	r1, #4
 800059e:	4813      	ldr	r0, [pc, #76]	@ (80005ec <Task1_Function+0x8c>)
 80005a0:	f000 fcab 	bl	8000efa <HAL_GPIO_TogglePin>
      osDelay(500);
 80005a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a8:	f001 fd2f 	bl	800200a <osDelay>
 80005ac:	e7dc      	b.n	8000568 <Task1_Function+0x8>
    }
    else if (p1 < p2)
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	da08      	bge.n	80005c8 <Task1_Function+0x68>
    {
      /* Task1 is lower: keep PA2 OFF */
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2104      	movs	r1, #4
 80005ba:	480c      	ldr	r0, [pc, #48]	@ (80005ec <Task1_Function+0x8c>)
 80005bc:	f000 fc84 	bl	8000ec8 <HAL_GPIO_WritePin>
      osDelay(50);
 80005c0:	2032      	movs	r0, #50	@ 0x32
 80005c2:	f001 fd22 	bl	800200a <osDelay>
 80005c6:	e7cf      	b.n	8000568 <Task1_Function+0x8>
    }
    else
    {
      /* Equal priority: both run */
      osThreadResume(Task2Handle);
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <Task1_Function+0x88>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 fcfb 	bl	8001fc8 <osThreadResume>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80005d2:	2104      	movs	r1, #4
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <Task1_Function+0x8c>)
 80005d6:	f000 fc90 	bl	8000efa <HAL_GPIO_TogglePin>
      osDelay(500);
 80005da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005de:	f001 fd14 	bl	800200a <osDelay>
  {
 80005e2:	e7c1      	b.n	8000568 <Task1_Function+0x8>
 80005e4:	20000028 	.word	0x20000028
 80005e8:	2000002c 	.word	0x2000002c
 80005ec:	40020000 	.word	0x40020000

080005f0 <Task2_Function>:
  }
}

/* Task2: LED on PA3 */
void Task2_Function(void *argument)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  for (;;)
  {
    osPriority_t p1 = osThreadGetPriority(Task1Handle);
 80005f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <Task2_Function+0x84>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fca5 	bl	8001f4c <osThreadGetPriority>
 8000602:	60f8      	str	r0, [r7, #12]
    osPriority_t p2 = osThreadGetPriority(Task2Handle);
 8000604:	4b1c      	ldr	r3, [pc, #112]	@ (8000678 <Task2_Function+0x88>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fc9f 	bl	8001f4c <osThreadGetPriority>
 800060e:	60b8      	str	r0, [r7, #8]

    if (p2 > p1)
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	dd12      	ble.n	800063e <Task2_Function+0x4e>
    {
      /* Task2 dominates: suspend Task1, keep PA2 OFF */
      osThreadSuspend(Task1Handle);
 8000618:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <Task2_Function+0x84>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fcb2 	bl	8001f86 <osThreadSuspend>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2104      	movs	r1, #4
 8000626:	4815      	ldr	r0, [pc, #84]	@ (800067c <Task2_Function+0x8c>)
 8000628:	f000 fc4e 	bl	8000ec8 <HAL_GPIO_WritePin>

      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800062c:	2108      	movs	r1, #8
 800062e:	4813      	ldr	r0, [pc, #76]	@ (800067c <Task2_Function+0x8c>)
 8000630:	f000 fc63 	bl	8000efa <HAL_GPIO_TogglePin>
      osDelay(500);
 8000634:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000638:	f001 fce7 	bl	800200a <osDelay>
 800063c:	e7dc      	b.n	80005f8 <Task2_Function+0x8>
    }
    else if (p2 < p1)
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	429a      	cmp	r2, r3
 8000644:	da08      	bge.n	8000658 <Task2_Function+0x68>
    {
      /* Task2 is lower: keep PA3 OFF */
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2108      	movs	r1, #8
 800064a:	480c      	ldr	r0, [pc, #48]	@ (800067c <Task2_Function+0x8c>)
 800064c:	f000 fc3c 	bl	8000ec8 <HAL_GPIO_WritePin>
      osDelay(50);
 8000650:	2032      	movs	r0, #50	@ 0x32
 8000652:	f001 fcda 	bl	800200a <osDelay>
 8000656:	e7cf      	b.n	80005f8 <Task2_Function+0x8>
    }
    else
    {
      /* Equal priority: both run */
      osThreadResume(Task1Handle);
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <Task2_Function+0x84>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fcb3 	bl	8001fc8 <osThreadResume>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000662:	2108      	movs	r1, #8
 8000664:	4805      	ldr	r0, [pc, #20]	@ (800067c <Task2_Function+0x8c>)
 8000666:	f000 fc48 	bl	8000efa <HAL_GPIO_TogglePin>
      osDelay(500);
 800066a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800066e:	f001 fccc 	bl	800200a <osDelay>
  {
 8000672:	e7c1      	b.n	80005f8 <Task2_Function+0x8>
 8000674:	20000028 	.word	0x20000028
 8000678:	2000002c 	.word	0x2000002c
 800067c:	40020000 	.word	0x40020000

08000680 <SystemClock_Config>:
  }
}

/* System Clock Configuration */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	@ 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fa82 	bl	8004b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <SystemClock_Config+0xb4>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	4a21      	ldr	r2, [pc, #132]	@ (8000734 <SystemClock_Config+0xb4>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <SystemClock_Config+0xb4>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <SystemClock_Config+0xb8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000738 <SystemClock_Config+0xb8>)
 80006ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <SystemClock_Config+0xb8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006f4:	2364      	movs	r3, #100	@ 0x64
 80006f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fc13 	bl	8000f30 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2103      	movs	r1, #3
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fe7a 	bl	8001420 <HAL_RCC_ClockConfig>
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	@ 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_GPIO_Init>:

/* GPIO Init */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <MX_GPIO_Init+0x5c>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000758:	4a0f      	ldr	r2, [pc, #60]	@ (8000798 <MX_GPIO_Init+0x5c>)
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000760:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <MX_GPIO_Init+0x5c>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	210c      	movs	r1, #12
 8000770:	480a      	ldr	r0, [pc, #40]	@ (800079c <MX_GPIO_Init+0x60>)
 8000772:	f000 fba9 	bl	8000ec8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000776:	230c      	movs	r3, #12
 8000778:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_GPIO_Init+0x60>)
 800078c:	f000 fa18 	bl	8000bc0 <HAL_GPIO_Init>
}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40020000 	.word	0x40020000

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <HAL_MspInit+0x54>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ae:	4a11      	ldr	r2, [pc, #68]	@ (80007f4 <HAL_MspInit+0x54>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b6:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <HAL_MspInit+0x54>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <HAL_MspInit+0x54>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ca:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <HAL_MspInit+0x54>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <HAL_MspInit+0x54>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	210f      	movs	r1, #15
 80007e2:	f06f 0001 	mvn.w	r0, #1
 80007e6:	f000 f9c1 	bl	8000b6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	@ 0x30
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000800:	2300      	movs	r3, #0
 8000802:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	4b2e      	ldr	r3, [pc, #184]	@ (80008c8 <HAL_InitTick+0xd0>)
 800080e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000810:	4a2d      	ldr	r2, [pc, #180]	@ (80008c8 <HAL_InitTick+0xd0>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	6453      	str	r3, [r2, #68]	@ 0x44
 8000818:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <HAL_InitTick+0xd0>)
 800081a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000824:	f107 020c 	add.w	r2, r7, #12
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4611      	mov	r1, r2
 800082e:	4618      	mov	r0, r3
 8000830:	f000 ffc2 	bl	80017b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000834:	f000 ffac 	bl	8001790 <HAL_RCC_GetPCLK2Freq>
 8000838:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800083a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800083c:	4a23      	ldr	r2, [pc, #140]	@ (80008cc <HAL_InitTick+0xd4>)
 800083e:	fba2 2303 	umull	r2, r3, r2, r3
 8000842:	0c9b      	lsrs	r3, r3, #18
 8000844:	3b01      	subs	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000848:	4b21      	ldr	r3, [pc, #132]	@ (80008d0 <HAL_InitTick+0xd8>)
 800084a:	4a22      	ldr	r2, [pc, #136]	@ (80008d4 <HAL_InitTick+0xdc>)
 800084c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800084e:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <HAL_InitTick+0xd8>)
 8000850:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000854:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000856:	4a1e      	ldr	r2, [pc, #120]	@ (80008d0 <HAL_InitTick+0xd8>)
 8000858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800085c:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <HAL_InitTick+0xd8>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <HAL_InitTick+0xd8>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000868:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <HAL_InitTick+0xd8>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800086e:	4818      	ldr	r0, [pc, #96]	@ (80008d0 <HAL_InitTick+0xd8>)
 8000870:	f000 ffd4 	bl	800181c <HAL_TIM_Base_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800087a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800087e:	2b00      	cmp	r3, #0
 8000880:	d11b      	bne.n	80008ba <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000882:	4813      	ldr	r0, [pc, #76]	@ (80008d0 <HAL_InitTick+0xd8>)
 8000884:	f001 f824 	bl	80018d0 <HAL_TIM_Base_Start_IT>
 8000888:	4603      	mov	r3, r0
 800088a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800088e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000892:	2b00      	cmp	r3, #0
 8000894:	d111      	bne.n	80008ba <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000896:	2019      	movs	r0, #25
 8000898:	f000 f984 	bl	8000ba4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b0f      	cmp	r3, #15
 80008a0:	d808      	bhi.n	80008b4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008a2:	2200      	movs	r2, #0
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	2019      	movs	r0, #25
 80008a8:	f000 f960 	bl	8000b6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ac:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <HAL_InitTick+0xe0>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6013      	str	r3, [r2, #0]
 80008b2:	e002      	b.n	80008ba <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3730      	adds	r7, #48	@ 0x30
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	20000030 	.word	0x20000030
 80008d4:	40010000 	.word	0x40010000
 80008d8:	20000004 	.word	0x20000004

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <NMI_Handler+0x4>

080008e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <MemManage_Handler+0x4>

080008f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <UsageFault_Handler+0x4>

08000904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000918:	4802      	ldr	r0, [pc, #8]	@ (8000924 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800091a:	f001 f83b 	bl	8001994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000030 	.word	0x20000030

08000928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <SystemInit+0x20>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000932:	4a05      	ldr	r2, [pc, #20]	@ (8000948 <SystemInit+0x20>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000984 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000950:	f7ff ffea 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	@ (8000988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	@ (800098c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	@ (8000990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	@ (8000998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097a:	f004 f915 	bl	8004ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097e:	f7ff fdc5 	bl	800050c <main>
  bx  lr    
 8000982:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000990:	08004cbc 	.word	0x08004cbc
  ldr r2, =_sbss
 8000994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000998:	200049cc 	.word	0x200049cc

0800099c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a4:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0d      	ldr	r2, [pc, #52]	@ (80009e0 <HAL_Init+0x40>)
 80009aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b0:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <HAL_Init+0x40>)
 80009b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	@ (80009e0 <HAL_Init+0x40>)
 80009c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f8c4 	bl	8000b56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ce:	200f      	movs	r0, #15
 80009d0:	f7ff ff12 	bl	80007f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f7ff fee4 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023c00 	.word	0x40023c00

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <HAL_GetTick+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000078 	.word	0x20000078

080009fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a48:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <__NVIC_GetPriorityGrouping+0x18>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	f003 0307 	and.w	r3, r3, #7
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	db0b      	blt.n	8000a8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	f003 021f 	and.w	r2, r3, #31
 8000a78:	4907      	ldr	r1, [pc, #28]	@ (8000a98 <__NVIC_EnableIRQ+0x38>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	095b      	lsrs	r3, r3, #5
 8000a80:	2001      	movs	r0, #1
 8000a82:	fa00 f202 	lsl.w	r2, r0, r2
 8000a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000e100 	.word	0xe000e100

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	@ (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	@ (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	@ 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	@ 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ff4c 	bl	80009fc <__NVIC_SetPriorityGrouping>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
 8000b78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7e:	f7ff ff61 	bl	8000a44 <__NVIC_GetPriorityGrouping>
 8000b82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	68b9      	ldr	r1, [r7, #8]
 8000b88:	6978      	ldr	r0, [r7, #20]
 8000b8a:	f7ff ffb1 	bl	8000af0 <NVIC_EncodePriority>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff80 	bl	8000a9c <__NVIC_SetPriority>
}
 8000b9c:	bf00      	nop
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff54 	bl	8000a60 <__NVIC_EnableIRQ>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	@ 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
 8000bda:	e159      	b.n	8000e90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bdc:	2201      	movs	r2, #1
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f040 8148 	bne.w	8000e8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d005      	beq.n	8000c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d130      	bne.n	8000c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4013      	ands	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	68da      	ldr	r2, [r3, #12]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	091b      	lsrs	r3, r3, #4
 8000c5e:	f003 0201 	and.w	r2, r3, #1
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d017      	beq.n	8000cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d123      	bne.n	8000d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	08da      	lsrs	r2, r3, #3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	220f      	movs	r2, #15
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	08da      	lsrs	r2, r3, #3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3208      	adds	r2, #8
 8000cfe:	69b9      	ldr	r1, [r7, #24]
 8000d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0203 	and.w	r2, r3, #3
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 80a2 	beq.w	8000e8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b57      	ldr	r3, [pc, #348]	@ (8000ea8 <HAL_GPIO_Init+0x2e8>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	4a56      	ldr	r2, [pc, #344]	@ (8000ea8 <HAL_GPIO_Init+0x2e8>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d56:	4b54      	ldr	r3, [pc, #336]	@ (8000ea8 <HAL_GPIO_Init+0x2e8>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d62:	4a52      	ldr	r2, [pc, #328]	@ (8000eac <HAL_GPIO_Init+0x2ec>)
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	220f      	movs	r2, #15
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a49      	ldr	r2, [pc, #292]	@ (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d019      	beq.n	8000dc2 <HAL_GPIO_Init+0x202>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a48      	ldr	r2, [pc, #288]	@ (8000eb4 <HAL_GPIO_Init+0x2f4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d013      	beq.n	8000dbe <HAL_GPIO_Init+0x1fe>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a47      	ldr	r2, [pc, #284]	@ (8000eb8 <HAL_GPIO_Init+0x2f8>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d00d      	beq.n	8000dba <HAL_GPIO_Init+0x1fa>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a46      	ldr	r2, [pc, #280]	@ (8000ebc <HAL_GPIO_Init+0x2fc>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d007      	beq.n	8000db6 <HAL_GPIO_Init+0x1f6>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a45      	ldr	r2, [pc, #276]	@ (8000ec0 <HAL_GPIO_Init+0x300>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d101      	bne.n	8000db2 <HAL_GPIO_Init+0x1f2>
 8000dae:	2304      	movs	r3, #4
 8000db0:	e008      	b.n	8000dc4 <HAL_GPIO_Init+0x204>
 8000db2:	2307      	movs	r3, #7
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x204>
 8000db6:	2303      	movs	r3, #3
 8000db8:	e004      	b.n	8000dc4 <HAL_GPIO_Init+0x204>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e002      	b.n	8000dc4 <HAL_GPIO_Init+0x204>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <HAL_GPIO_Init+0x204>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	69fa      	ldr	r2, [r7, #28]
 8000dc6:	f002 0203 	and.w	r2, r2, #3
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	4093      	lsls	r3, r2
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd4:	4935      	ldr	r1, [pc, #212]	@ (8000eac <HAL_GPIO_Init+0x2ec>)
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	3302      	adds	r3, #2
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000de2:	4b38      	ldr	r3, [pc, #224]	@ (8000ec4 <HAL_GPIO_Init+0x304>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e06:	4a2f      	ldr	r2, [pc, #188]	@ (8000ec4 <HAL_GPIO_Init+0x304>)
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec4 <HAL_GPIO_Init+0x304>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e30:	4a24      	ldr	r2, [pc, #144]	@ (8000ec4 <HAL_GPIO_Init+0x304>)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e36:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <HAL_GPIO_Init+0x304>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ec4 <HAL_GPIO_Init+0x304>)
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e60:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <HAL_GPIO_Init+0x304>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e84:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec4 <HAL_GPIO_Init+0x304>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	2b0f      	cmp	r3, #15
 8000e94:	f67f aea2 	bls.w	8000bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3724      	adds	r7, #36	@ 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40013800 	.word	0x40013800
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020c00 	.word	0x40020c00
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40013c00 	.word	0x40013c00

08000ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	807b      	strh	r3, [r7, #2]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed8:	787b      	ldrb	r3, [r7, #1]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ee4:	e003      	b.n	8000eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ee6:	887b      	ldrh	r3, [r7, #2]
 8000ee8:	041a      	lsls	r2, r3, #16
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	619a      	str	r2, [r3, #24]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b085      	sub	sp, #20
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	460b      	mov	r3, r1
 8000f04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f0c:	887a      	ldrh	r2, [r7, #2]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4013      	ands	r3, r2
 8000f12:	041a      	lsls	r2, r3, #16
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	400b      	ands	r3, r1
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	619a      	str	r2, [r3, #24]
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e267      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d075      	beq.n	800103a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f4e:	4b88      	ldr	r3, [pc, #544]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	d00c      	beq.n	8000f74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f5a:	4b85      	ldr	r3, [pc, #532]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f62:	2b08      	cmp	r3, #8
 8000f64:	d112      	bne.n	8000f8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f66:	4b82      	ldr	r3, [pc, #520]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f72:	d10b      	bne.n	8000f8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f74:	4b7e      	ldr	r3, [pc, #504]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d05b      	beq.n	8001038 <HAL_RCC_OscConfig+0x108>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d157      	bne.n	8001038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e242      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f94:	d106      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x74>
 8000f96:	4b76      	ldr	r3, [pc, #472]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a75      	ldr	r2, [pc, #468]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e01d      	b.n	8000fe0 <HAL_RCC_OscConfig+0xb0>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x98>
 8000fae:	4b70      	ldr	r3, [pc, #448]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a6f      	ldr	r2, [pc, #444]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b6d      	ldr	r3, [pc, #436]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a6c      	ldr	r2, [pc, #432]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e00b      	b.n	8000fe0 <HAL_RCC_OscConfig+0xb0>
 8000fc8:	4b69      	ldr	r3, [pc, #420]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a68      	ldr	r2, [pc, #416]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b66      	ldr	r3, [pc, #408]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a65      	ldr	r2, [pc, #404]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d013      	beq.n	8001010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fcfc 	bl	80009e4 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fcf8 	bl	80009e4 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	@ 0x64
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e207      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001002:	4b5b      	ldr	r3, [pc, #364]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f0      	beq.n	8000ff0 <HAL_RCC_OscConfig+0xc0>
 800100e:	e014      	b.n	800103a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fce8 	bl	80009e4 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001018:	f7ff fce4 	bl	80009e4 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b64      	cmp	r3, #100	@ 0x64
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e1f3      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102a:	4b51      	ldr	r3, [pc, #324]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0xe8>
 8001036:	e000      	b.n	800103a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d063      	beq.n	800110e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001046:	4b4a      	ldr	r3, [pc, #296]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00b      	beq.n	800106a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001052:	4b47      	ldr	r3, [pc, #284]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800105a:	2b08      	cmp	r3, #8
 800105c:	d11c      	bne.n	8001098 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800105e:	4b44      	ldr	r3, [pc, #272]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d116      	bne.n	8001098 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106a:	4b41      	ldr	r3, [pc, #260]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <HAL_RCC_OscConfig+0x152>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d001      	beq.n	8001082 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e1c7      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001082:	4b3b      	ldr	r3, [pc, #236]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4937      	ldr	r1, [pc, #220]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8001092:	4313      	orrs	r3, r2
 8001094:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001096:	e03a      	b.n	800110e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d020      	beq.n	80010e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a0:	4b34      	ldr	r3, [pc, #208]	@ (8001174 <HAL_RCC_OscConfig+0x244>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a6:	f7ff fc9d 	bl	80009e4 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ae:	f7ff fc99 	bl	80009e4 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e1a8      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010cc:	4b28      	ldr	r3, [pc, #160]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4925      	ldr	r1, [pc, #148]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	600b      	str	r3, [r1, #0]
 80010e0:	e015      	b.n	800110e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e2:	4b24      	ldr	r3, [pc, #144]	@ (8001174 <HAL_RCC_OscConfig+0x244>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e8:	f7ff fc7c 	bl	80009e4 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f0:	f7ff fc78 	bl	80009e4 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e187      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001102:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d036      	beq.n	8001188 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d016      	beq.n	8001150 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <HAL_RCC_OscConfig+0x248>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001128:	f7ff fc5c 	bl	80009e4 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001130:	f7ff fc58 	bl	80009e4 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e167      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_RCC_OscConfig+0x240>)
 8001144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0x200>
 800114e:	e01b      	b.n	8001188 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <HAL_RCC_OscConfig+0x248>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001156:	f7ff fc45 	bl	80009e4 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115c:	e00e      	b.n	800117c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115e:	f7ff fc41 	bl	80009e4 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d907      	bls.n	800117c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e150      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
 8001170:	40023800 	.word	0x40023800
 8001174:	42470000 	.word	0x42470000
 8001178:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117c:	4b88      	ldr	r3, [pc, #544]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 800117e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1ea      	bne.n	800115e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 8097 	beq.w	80012c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119a:	4b81      	ldr	r3, [pc, #516]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10f      	bne.n	80011c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b7d      	ldr	r3, [pc, #500]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a7c      	ldr	r2, [pc, #496]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b7a      	ldr	r3, [pc, #488]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011c2:	2301      	movs	r3, #1
 80011c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c6:	4b77      	ldr	r3, [pc, #476]	@ (80013a4 <HAL_RCC_OscConfig+0x474>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d118      	bne.n	8001204 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011d2:	4b74      	ldr	r3, [pc, #464]	@ (80013a4 <HAL_RCC_OscConfig+0x474>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a73      	ldr	r2, [pc, #460]	@ (80013a4 <HAL_RCC_OscConfig+0x474>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011de:	f7ff fc01 	bl	80009e4 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e6:	f7ff fbfd 	bl	80009e4 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e10c      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f8:	4b6a      	ldr	r3, [pc, #424]	@ (80013a4 <HAL_RCC_OscConfig+0x474>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d106      	bne.n	800121a <HAL_RCC_OscConfig+0x2ea>
 800120c:	4b64      	ldr	r3, [pc, #400]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 800120e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001210:	4a63      	ldr	r2, [pc, #396]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6713      	str	r3, [r2, #112]	@ 0x70
 8001218:	e01c      	b.n	8001254 <HAL_RCC_OscConfig+0x324>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b05      	cmp	r3, #5
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0x30c>
 8001222:	4b5f      	ldr	r3, [pc, #380]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001226:	4a5e      	ldr	r2, [pc, #376]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6713      	str	r3, [r2, #112]	@ 0x70
 800122e:	4b5c      	ldr	r3, [pc, #368]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001232:	4a5b      	ldr	r2, [pc, #364]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6713      	str	r3, [r2, #112]	@ 0x70
 800123a:	e00b      	b.n	8001254 <HAL_RCC_OscConfig+0x324>
 800123c:	4b58      	ldr	r3, [pc, #352]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 800123e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001240:	4a57      	ldr	r2, [pc, #348]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001242:	f023 0301 	bic.w	r3, r3, #1
 8001246:	6713      	str	r3, [r2, #112]	@ 0x70
 8001248:	4b55      	ldr	r3, [pc, #340]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 800124a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800124c:	4a54      	ldr	r2, [pc, #336]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 800124e:	f023 0304 	bic.w	r3, r3, #4
 8001252:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d015      	beq.n	8001288 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125c:	f7ff fbc2 	bl	80009e4 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001262:	e00a      	b.n	800127a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001264:	f7ff fbbe 	bl	80009e4 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001272:	4293      	cmp	r3, r2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e0cb      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800127a:	4b49      	ldr	r3, [pc, #292]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 800127c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0ee      	beq.n	8001264 <HAL_RCC_OscConfig+0x334>
 8001286:	e014      	b.n	80012b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001288:	f7ff fbac 	bl	80009e4 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128e:	e00a      	b.n	80012a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001290:	f7ff fba8 	bl	80009e4 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e0b5      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a6:	4b3e      	ldr	r3, [pc, #248]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 80012a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1ee      	bne.n	8001290 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d105      	bne.n	80012c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b8:	4b39      	ldr	r3, [pc, #228]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012bc:	4a38      	ldr	r2, [pc, #224]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 80012be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80a1 	beq.w	8001410 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012ce:	4b34      	ldr	r3, [pc, #208]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d05c      	beq.n	8001394 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d141      	bne.n	8001366 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e2:	4b31      	ldr	r3, [pc, #196]	@ (80013a8 <HAL_RCC_OscConfig+0x478>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb7c 	bl	80009e4 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff fb78 	bl	80009e4 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e087      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001302:	4b27      	ldr	r3, [pc, #156]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131c:	019b      	lsls	r3, r3, #6
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001324:	085b      	lsrs	r3, r3, #1
 8001326:	3b01      	subs	r3, #1
 8001328:	041b      	lsls	r3, r3, #16
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001330:	061b      	lsls	r3, r3, #24
 8001332:	491b      	ldr	r1, [pc, #108]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <HAL_RCC_OscConfig+0x478>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fb51 	bl	80009e4 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001346:	f7ff fb4d 	bl	80009e4 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e05c      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x416>
 8001364:	e054      	b.n	8001410 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <HAL_RCC_OscConfig+0x478>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fb3a 	bl	80009e4 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff fb36 	bl	80009e4 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e045      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x444>
 8001392:	e03d      	b.n	8001410 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d107      	bne.n	80013ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e038      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40007000 	.word	0x40007000
 80013a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <HAL_RCC_OscConfig+0x4ec>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d028      	beq.n	800140c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d121      	bne.n	800140c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d11a      	bne.n	800140c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013dc:	4013      	ands	r3, r2
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d111      	bne.n	800140c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f2:	085b      	lsrs	r3, r3, #1
 80013f4:	3b01      	subs	r3, #1
 80013f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d107      	bne.n	800140c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001406:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0cc      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001434:	4b68      	ldr	r3, [pc, #416]	@ (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d90c      	bls.n	800145c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b65      	ldr	r3, [pc, #404]	@ (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144a:	4b63      	ldr	r3, [pc, #396]	@ (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0b8      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d020      	beq.n	80014aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001474:	4b59      	ldr	r3, [pc, #356]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4a58      	ldr	r2, [pc, #352]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800147e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800148c:	4b53      	ldr	r3, [pc, #332]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	4a52      	ldr	r2, [pc, #328]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001498:	4b50      	ldr	r3, [pc, #320]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	494d      	ldr	r1, [pc, #308]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d044      	beq.n	8001540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d107      	bne.n	80014ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	4b47      	ldr	r3, [pc, #284]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d119      	bne.n	80014fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e07f      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d003      	beq.n	80014de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d107      	bne.n	80014ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014de:	4b3f      	ldr	r3, [pc, #252]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d109      	bne.n	80014fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e06f      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ee:	4b3b      	ldr	r3, [pc, #236]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e067      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fe:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f023 0203 	bic.w	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4934      	ldr	r1, [pc, #208]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	4313      	orrs	r3, r2
 800150e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001510:	f7ff fa68 	bl	80009e4 <HAL_GetTick>
 8001514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001516:	e00a      	b.n	800152e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001518:	f7ff fa64 	bl	80009e4 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e04f      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152e:	4b2b      	ldr	r3, [pc, #172]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 020c 	and.w	r2, r3, #12
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	429a      	cmp	r2, r3
 800153e:	d1eb      	bne.n	8001518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001540:	4b25      	ldr	r3, [pc, #148]	@ (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d20c      	bcs.n	8001568 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154e:	4b22      	ldr	r3, [pc, #136]	@ (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e032      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001574:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4916      	ldr	r1, [pc, #88]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001592:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	490e      	ldr	r1, [pc, #56]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015a6:	f000 f821 	bl	80015ec <HAL_RCC_GetSysClockFreq>
 80015aa:	4602      	mov	r2, r0
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	490a      	ldr	r1, [pc, #40]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	5ccb      	ldrb	r3, [r1, r3]
 80015ba:	fa22 f303 	lsr.w	r3, r2, r3
 80015be:	4a09      	ldr	r2, [pc, #36]	@ (80015e4 <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff f916 	bl	80007f8 <HAL_InitTick>

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023c00 	.word	0x40023c00
 80015dc:	40023800 	.word	0x40023800
 80015e0:	08004c94 	.word	0x08004c94
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f0:	b090      	sub	sp, #64	@ 0x40
 80015f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001604:	4b59      	ldr	r3, [pc, #356]	@ (800176c <HAL_RCC_GetSysClockFreq+0x180>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b08      	cmp	r3, #8
 800160e:	d00d      	beq.n	800162c <HAL_RCC_GetSysClockFreq+0x40>
 8001610:	2b08      	cmp	r3, #8
 8001612:	f200 80a1 	bhi.w	8001758 <HAL_RCC_GetSysClockFreq+0x16c>
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0x34>
 800161a:	2b04      	cmp	r3, #4
 800161c:	d003      	beq.n	8001626 <HAL_RCC_GetSysClockFreq+0x3a>
 800161e:	e09b      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001620:	4b53      	ldr	r3, [pc, #332]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x184>)
 8001622:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001624:	e09b      	b.n	800175e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001626:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x188>)
 8001628:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800162a:	e098      	b.n	800175e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800162c:	4b4f      	ldr	r3, [pc, #316]	@ (800176c <HAL_RCC_GetSysClockFreq+0x180>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001634:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001636:	4b4d      	ldr	r3, [pc, #308]	@ (800176c <HAL_RCC_GetSysClockFreq+0x180>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d028      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001642:	4b4a      	ldr	r3, [pc, #296]	@ (800176c <HAL_RCC_GetSysClockFreq+0x180>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	099b      	lsrs	r3, r3, #6
 8001648:	2200      	movs	r2, #0
 800164a:	623b      	str	r3, [r7, #32]
 800164c:	627a      	str	r2, [r7, #36]	@ 0x24
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001654:	2100      	movs	r1, #0
 8001656:	4b47      	ldr	r3, [pc, #284]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x188>)
 8001658:	fb03 f201 	mul.w	r2, r3, r1
 800165c:	2300      	movs	r3, #0
 800165e:	fb00 f303 	mul.w	r3, r0, r3
 8001662:	4413      	add	r3, r2
 8001664:	4a43      	ldr	r2, [pc, #268]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x188>)
 8001666:	fba0 1202 	umull	r1, r2, r0, r2
 800166a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800166c:	460a      	mov	r2, r1
 800166e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001670:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001672:	4413      	add	r3, r2
 8001674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001678:	2200      	movs	r2, #0
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	61fa      	str	r2, [r7, #28]
 800167e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001682:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001686:	f7fe fdab 	bl	80001e0 <__aeabi_uldivmod>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4613      	mov	r3, r2
 8001690:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001692:	e053      	b.n	800173c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001694:	4b35      	ldr	r3, [pc, #212]	@ (800176c <HAL_RCC_GetSysClockFreq+0x180>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	2200      	movs	r2, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	617a      	str	r2, [r7, #20]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016a6:	f04f 0b00 	mov.w	fp, #0
 80016aa:	4652      	mov	r2, sl
 80016ac:	465b      	mov	r3, fp
 80016ae:	f04f 0000 	mov.w	r0, #0
 80016b2:	f04f 0100 	mov.w	r1, #0
 80016b6:	0159      	lsls	r1, r3, #5
 80016b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016bc:	0150      	lsls	r0, r2, #5
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	ebb2 080a 	subs.w	r8, r2, sl
 80016c6:	eb63 090b 	sbc.w	r9, r3, fp
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80016d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80016da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80016de:	ebb2 0408 	subs.w	r4, r2, r8
 80016e2:	eb63 0509 	sbc.w	r5, r3, r9
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	00eb      	lsls	r3, r5, #3
 80016f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016f4:	00e2      	lsls	r2, r4, #3
 80016f6:	4614      	mov	r4, r2
 80016f8:	461d      	mov	r5, r3
 80016fa:	eb14 030a 	adds.w	r3, r4, sl
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	eb45 030b 	adc.w	r3, r5, fp
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001712:	4629      	mov	r1, r5
 8001714:	028b      	lsls	r3, r1, #10
 8001716:	4621      	mov	r1, r4
 8001718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800171c:	4621      	mov	r1, r4
 800171e:	028a      	lsls	r2, r1, #10
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001726:	2200      	movs	r2, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	60fa      	str	r2, [r7, #12]
 800172c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001730:	f7fe fd56 	bl	80001e0 <__aeabi_uldivmod>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4613      	mov	r3, r2
 800173a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_RCC_GetSysClockFreq+0x180>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	0c1b      	lsrs	r3, r3, #16
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	3301      	adds	r3, #1
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800174c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800174e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001750:	fbb2 f3f3 	udiv	r3, r2, r3
 8001754:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001756:	e002      	b.n	800175e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001758:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x184>)
 800175a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800175c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800175e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001760:	4618      	mov	r0, r3
 8001762:	3740      	adds	r7, #64	@ 0x40
 8001764:	46bd      	mov	sp, r7
 8001766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	00f42400 	.word	0x00f42400
 8001774:	017d7840 	.word	0x017d7840

08001778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800177c:	4b03      	ldr	r3, [pc, #12]	@ (800178c <HAL_RCC_GetHCLKFreq+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000000 	.word	0x20000000

08001790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001794:	f7ff fff0 	bl	8001778 <HAL_RCC_GetHCLKFreq>
 8001798:	4602      	mov	r2, r0
 800179a:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	0b5b      	lsrs	r3, r3, #13
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	4903      	ldr	r1, [pc, #12]	@ (80017b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017a6:	5ccb      	ldrb	r3, [r1, r3]
 80017a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	08004ca4 	.word	0x08004ca4

080017b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	220f      	movs	r2, #15
 80017c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_RCC_GetClockConfig+0x5c>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <HAL_RCC_GetClockConfig+0x5c>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <HAL_RCC_GetClockConfig+0x5c>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <HAL_RCC_GetClockConfig+0x5c>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	08db      	lsrs	r3, r3, #3
 80017f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017fa:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <HAL_RCC_GetClockConfig+0x60>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0207 	and.w	r2, r3, #7
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	601a      	str	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40023c00 	.word	0x40023c00

0800181c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e041      	b.n	80018b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d106      	bne.n	8001848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f839 	bl	80018ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2202      	movs	r2, #2
 800184c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3304      	adds	r3, #4
 8001858:	4619      	mov	r1, r3
 800185a:	4610      	mov	r0, r2
 800185c:	f000 f9bc 	bl	8001bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d001      	beq.n	80018e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e044      	b.n	8001972 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1e      	ldr	r2, [pc, #120]	@ (8001980 <HAL_TIM_Base_Start_IT+0xb0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d018      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x6c>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001912:	d013      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x6c>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1a      	ldr	r2, [pc, #104]	@ (8001984 <HAL_TIM_Base_Start_IT+0xb4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00e      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x6c>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a19      	ldr	r2, [pc, #100]	@ (8001988 <HAL_TIM_Base_Start_IT+0xb8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d009      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x6c>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a17      	ldr	r2, [pc, #92]	@ (800198c <HAL_TIM_Base_Start_IT+0xbc>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d004      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x6c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a16      	ldr	r2, [pc, #88]	@ (8001990 <HAL_TIM_Base_Start_IT+0xc0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d111      	bne.n	8001960 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b06      	cmp	r3, #6
 800194c:	d010      	beq.n	8001970 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0201 	orr.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800195e:	e007      	b.n	8001970 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40010000 	.word	0x40010000
 8001984:	40000400 	.word	0x40000400
 8001988:	40000800 	.word	0x40000800
 800198c:	40000c00 	.word	0x40000c00
 8001990:	40014000 	.word	0x40014000

08001994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d020      	beq.n	80019f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01b      	beq.n	80019f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f06f 0202 	mvn.w	r2, #2
 80019c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f8dc 	bl	8001b9c <HAL_TIM_IC_CaptureCallback>
 80019e4:	e005      	b.n	80019f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f8ce 	bl	8001b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f8df 	bl	8001bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d020      	beq.n	8001a44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01b      	beq.n	8001a44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f06f 0204 	mvn.w	r2, #4
 8001a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2202      	movs	r2, #2
 8001a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f8b6 	bl	8001b9c <HAL_TIM_IC_CaptureCallback>
 8001a30:	e005      	b.n	8001a3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f8a8 	bl	8001b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f8b9 	bl	8001bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d020      	beq.n	8001a90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d01b      	beq.n	8001a90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f06f 0208 	mvn.w	r2, #8
 8001a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2204      	movs	r2, #4
 8001a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f890 	bl	8001b9c <HAL_TIM_IC_CaptureCallback>
 8001a7c:	e005      	b.n	8001a8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f882 	bl	8001b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f893 	bl	8001bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d020      	beq.n	8001adc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d01b      	beq.n	8001adc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f06f 0210 	mvn.w	r2, #16
 8001aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f86a 	bl	8001b9c <HAL_TIM_IC_CaptureCallback>
 8001ac8:	e005      	b.n	8001ad6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f85c 	bl	8001b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f86d 	bl	8001bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00c      	beq.n	8001b00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f06f 0201 	mvn.w	r2, #1
 8001af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f83a 	bl	8001b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00c      	beq.n	8001b24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d007      	beq.n	8001b24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f8ea 	bl	8001cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00c      	beq.n	8001b48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f83e 	bl	8001bc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 0320 	and.w	r3, r3, #32
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00c      	beq.n	8001b6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0220 	mvn.w	r2, #32
 8001b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f8bc 	bl	8001ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a37      	ldr	r2, [pc, #220]	@ (8001cc8 <TIM_Base_SetConfig+0xf0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d00f      	beq.n	8001c10 <TIM_Base_SetConfig+0x38>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf6:	d00b      	beq.n	8001c10 <TIM_Base_SetConfig+0x38>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a34      	ldr	r2, [pc, #208]	@ (8001ccc <TIM_Base_SetConfig+0xf4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d007      	beq.n	8001c10 <TIM_Base_SetConfig+0x38>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a33      	ldr	r2, [pc, #204]	@ (8001cd0 <TIM_Base_SetConfig+0xf8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d003      	beq.n	8001c10 <TIM_Base_SetConfig+0x38>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a32      	ldr	r2, [pc, #200]	@ (8001cd4 <TIM_Base_SetConfig+0xfc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d108      	bne.n	8001c22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a28      	ldr	r2, [pc, #160]	@ (8001cc8 <TIM_Base_SetConfig+0xf0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01b      	beq.n	8001c62 <TIM_Base_SetConfig+0x8a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c30:	d017      	beq.n	8001c62 <TIM_Base_SetConfig+0x8a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a25      	ldr	r2, [pc, #148]	@ (8001ccc <TIM_Base_SetConfig+0xf4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <TIM_Base_SetConfig+0x8a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a24      	ldr	r2, [pc, #144]	@ (8001cd0 <TIM_Base_SetConfig+0xf8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00f      	beq.n	8001c62 <TIM_Base_SetConfig+0x8a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a23      	ldr	r2, [pc, #140]	@ (8001cd4 <TIM_Base_SetConfig+0xfc>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00b      	beq.n	8001c62 <TIM_Base_SetConfig+0x8a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a22      	ldr	r2, [pc, #136]	@ (8001cd8 <TIM_Base_SetConfig+0x100>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d007      	beq.n	8001c62 <TIM_Base_SetConfig+0x8a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a21      	ldr	r2, [pc, #132]	@ (8001cdc <TIM_Base_SetConfig+0x104>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d003      	beq.n	8001c62 <TIM_Base_SetConfig+0x8a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a20      	ldr	r2, [pc, #128]	@ (8001ce0 <TIM_Base_SetConfig+0x108>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d108      	bne.n	8001c74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <TIM_Base_SetConfig+0xf0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d103      	bne.n	8001ca2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f043 0204 	orr.w	r2, r3, #4
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	601a      	str	r2, [r3, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40010000 	.word	0x40010000
 8001ccc:	40000400 	.word	0x40000400
 8001cd0:	40000800 	.word	0x40000800
 8001cd4:	40000c00 	.word	0x40000c00
 8001cd8:	40014000 	.word	0x40014000
 8001cdc:	40014400 	.word	0x40014400
 8001ce0:	40014800 	.word	0x40014800

08001ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <__NVIC_SetPriority>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	db0a      	blt.n	8001d36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	490c      	ldr	r1, [pc, #48]	@ (8001d58 <__NVIC_SetPriority+0x4c>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d34:	e00a      	b.n	8001d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4908      	ldr	r1, [pc, #32]	@ (8001d5c <__NVIC_SetPriority+0x50>)
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	3b04      	subs	r3, #4
 8001d44:	0112      	lsls	r2, r2, #4
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	761a      	strb	r2, [r3, #24]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <SysTick_Handler+0x1c>)
 8001d66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001d68:	f001 fe98 	bl	8003a9c <xTaskGetSchedulerState>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d001      	beq.n	8001d76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001d72:	f002 fc91 	bl	8004698 <xPortSysTickHandler>
  }
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001d84:	2100      	movs	r1, #0
 8001d86:	f06f 0004 	mvn.w	r0, #4
 8001d8a:	f7ff ffbf 	bl	8001d0c <__NVIC_SetPriority>
#endif
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d9a:	f3ef 8305 	mrs	r3, IPSR
 8001d9e:	603b      	str	r3, [r7, #0]
  return(result);
 8001da0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001da6:	f06f 0305 	mvn.w	r3, #5
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	e00c      	b.n	8001dc8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <osKernelInitialize+0x44>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d105      	bne.n	8001dc2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001db6:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <osKernelInitialize+0x44>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	e002      	b.n	8001dc8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001dc8:	687b      	ldr	r3, [r7, #4]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	2000007c 	.word	0x2000007c

08001ddc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001de2:	f3ef 8305 	mrs	r3, IPSR
 8001de6:	603b      	str	r3, [r7, #0]
  return(result);
 8001de8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001dee:	f06f 0305 	mvn.w	r3, #5
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	e010      	b.n	8001e18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001df6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <osKernelStart+0x48>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d109      	bne.n	8001e12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001dfe:	f7ff ffbf 	bl	8001d80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e02:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <osKernelStart+0x48>)
 8001e04:	2202      	movs	r2, #2
 8001e06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e08:	f001 f9fa 	bl	8003200 <vTaskStartScheduler>
      stat = osOK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	e002      	b.n	8001e18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2000007c 	.word	0x2000007c

08001e28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08e      	sub	sp, #56	@ 0x38
 8001e2c:	af04      	add	r7, sp, #16
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e38:	f3ef 8305 	mrs	r3, IPSR
 8001e3c:	617b      	str	r3, [r7, #20]
  return(result);
 8001e3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d17e      	bne.n	8001f42 <osThreadNew+0x11a>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d07b      	beq.n	8001f42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001e4a:	2380      	movs	r3, #128	@ 0x80
 8001e4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001e4e:	2318      	movs	r3, #24
 8001e50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d045      	beq.n	8001eee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <osThreadNew+0x48>
        name = attr->name;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <osThreadNew+0x6e>
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	2b38      	cmp	r3, #56	@ 0x38
 8001e88:	d805      	bhi.n	8001e96 <osThreadNew+0x6e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <osThreadNew+0x72>
        return (NULL);
 8001e96:	2300      	movs	r3, #0
 8001e98:	e054      	b.n	8001f44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00e      	beq.n	8001ed0 <osThreadNew+0xa8>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b5b      	cmp	r3, #91	@ 0x5b
 8001eb8:	d90a      	bls.n	8001ed0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d006      	beq.n	8001ed0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <osThreadNew+0xa8>
        mem = 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	e010      	b.n	8001ef2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10c      	bne.n	8001ef2 <osThreadNew+0xca>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d108      	bne.n	8001ef2 <osThreadNew+0xca>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d104      	bne.n	8001ef2 <osThreadNew+0xca>
          mem = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	e001      	b.n	8001ef2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d110      	bne.n	8001f1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f00:	9202      	str	r2, [sp, #8]
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	6a3a      	ldr	r2, [r7, #32]
 8001f0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 fe78 	bl	8002c04 <xTaskCreateStatic>
 8001f14:	4603      	mov	r3, r0
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	e013      	b.n	8001f42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d110      	bne.n	8001f42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 fec6 	bl	8002cc4 <xTaskCreate>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <osThreadNew+0x11a>
            hTask = NULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001f42:	693b      	ldr	r3, [r7, #16]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3728      	adds	r7, #40	@ 0x28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <osThreadGetPriority>:
  }

  return (stat);
}

osPriority_t osThreadGetPriority (osThreadId_t thread_id) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f58:	f3ef 8305 	mrs	r3, IPSR
 8001f5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
  osPriority_t prio;

  if (IS_IRQ() || (hTask == NULL)) {
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <osThreadGetPriority+0x1e>
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <osThreadGetPriority+0x26>
    prio = osPriorityError;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	e004      	b.n	8001f7c <osThreadGetPriority+0x30>
  } else {
    prio = (osPriority_t)((int32_t)uxTaskPriorityGet (hTask));
 8001f72:	6938      	ldr	r0, [r7, #16]
 8001f74:	f001 f822 	bl	8002fbc <uxTaskPriorityGet>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	617b      	str	r3, [r7, #20]
  }

  return (prio);
 8001f7c:	697b      	ldr	r3, [r7, #20]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f92:	f3ef 8305 	mrs	r3, IPSR
 8001f96:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f98:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8001f9e:	f06f 0305 	mvn.w	r3, #5
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	e00b      	b.n	8001fbe <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d103      	bne.n	8001fb4 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8001fac:	f06f 0303 	mvn.w	r3, #3
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e004      	b.n	8001fbe <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8001fb8:	6938      	ldr	r0, [r7, #16]
 8001fba:	f001 f819 	bl	8002ff0 <vTaskSuspend>
  }

  return (stat);
 8001fbe:	697b      	ldr	r3, [r7, #20]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fd4:	f3ef 8305 	mrs	r3, IPSR
 8001fd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001fda:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <osThreadResume+0x20>
    stat = osErrorISR;
 8001fe0:	f06f 0305 	mvn.w	r3, #5
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e00b      	b.n	8002000 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d103      	bne.n	8001ff6 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8001fee:	f06f 0303 	mvn.w	r3, #3
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	e004      	b.n	8002000 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8001ffa:	6938      	ldr	r0, [r7, #16]
 8001ffc:	f001 f8a0 	bl	8003140 <vTaskResume>
  }

  return (stat);
 8002000:	697b      	ldr	r3, [r7, #20]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002012:	f3ef 8305 	mrs	r3, IPSR
 8002016:	60bb      	str	r3, [r7, #8]
  return(result);
 8002018:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <osDelay+0x1c>
    stat = osErrorISR;
 800201e:	f06f 0305 	mvn.w	r3, #5
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e007      	b.n	8002036 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 ff8d 	bl	8002f50 <vTaskDelay>
    }
  }

  return (stat);
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a07      	ldr	r2, [pc, #28]	@ (800206c <vApplicationGetIdleTaskMemory+0x2c>)
 8002050:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	4a06      	ldr	r2, [pc, #24]	@ (8002070 <vApplicationGetIdleTaskMemory+0x30>)
 8002056:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2280      	movs	r2, #128	@ 0x80
 800205c:	601a      	str	r2, [r3, #0]
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000080 	.word	0x20000080
 8002070:	200000dc 	.word	0x200000dc

08002074 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a07      	ldr	r2, [pc, #28]	@ (80020a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002084:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	4a06      	ldr	r2, [pc, #24]	@ (80020a4 <vApplicationGetTimerTaskMemory+0x30>)
 800208a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	200002dc 	.word	0x200002dc
 80020a4:	20000338 	.word	0x20000338

080020a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f103 0208 	add.w	r2, r3, #8
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f103 0208 	add.w	r2, r3, #8
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f103 0208 	add.w	r2, r3, #8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d103      	bne.n	800216a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	e00c      	b.n	8002184 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3308      	adds	r3, #8
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e002      	b.n	8002178 <vListInsert+0x2e>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	429a      	cmp	r2, r3
 8002182:	d2f6      	bcs.n	8002172 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	601a      	str	r2, [r3, #0]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6892      	ldr	r2, [r2, #8]
 80021d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6852      	ldr	r2, [r2, #4]
 80021dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d103      	bne.n	80021f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	1e5a      	subs	r2, r3, #1
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10b      	bne.n	800223c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800223c:	f002 f99c 	bl	8004578 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002248:	68f9      	ldr	r1, [r7, #12]
 800224a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	441a      	add	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226c:	3b01      	subs	r3, #1
 800226e:	68f9      	ldr	r1, [r7, #12]
 8002270:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	441a      	add	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	22ff      	movs	r2, #255	@ 0xff
 8002280:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	22ff      	movs	r2, #255	@ 0xff
 8002288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d114      	bne.n	80022bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01a      	beq.n	80022d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3310      	adds	r3, #16
 800229e:	4618      	mov	r0, r3
 80022a0:	f001 fa3c 	bl	800371c <xTaskRemoveFromEventList>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d012      	beq.n	80022d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022aa:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <xQueueGenericReset+0xd0>)
 80022ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	f3bf 8f4f 	dsb	sy
 80022b6:	f3bf 8f6f 	isb	sy
 80022ba:	e009      	b.n	80022d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3310      	adds	r3, #16
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fef1 	bl	80020a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3324      	adds	r3, #36	@ 0x24
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff feec 	bl	80020a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80022d0:	f002 f984 	bl	80045dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80022d4:	2301      	movs	r3, #1
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	e000ed04 	.word	0xe000ed04

080022e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08e      	sub	sp, #56	@ 0x38
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10b      	bne.n	8002310 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80022f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022fc:	f383 8811 	msr	BASEPRI, r3
 8002300:	f3bf 8f6f 	isb	sy
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10b      	bne.n	800232e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	e7fd      	b.n	800232a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <xQueueGenericCreateStatic+0x56>
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <xQueueGenericCreateStatic+0x5a>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <xQueueGenericCreateStatic+0x5c>
 800233e:	2300      	movs	r3, #0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10b      	bne.n	800235c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	623b      	str	r3, [r7, #32]
}
 8002356:	bf00      	nop
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <xQueueGenericCreateStatic+0x84>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <xQueueGenericCreateStatic+0x88>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <xQueueGenericCreateStatic+0x8a>
 800236c:	2300      	movs	r3, #0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10b      	bne.n	800238a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002376:	f383 8811 	msr	BASEPRI, r3
 800237a:	f3bf 8f6f 	isb	sy
 800237e:	f3bf 8f4f 	dsb	sy
 8002382:	61fb      	str	r3, [r7, #28]
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	e7fd      	b.n	8002386 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800238a:	2350      	movs	r3, #80	@ 0x50
 800238c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b50      	cmp	r3, #80	@ 0x50
 8002392:	d00b      	beq.n	80023ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	61bb      	str	r3, [r7, #24]
}
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80023ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80023b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00d      	beq.n	80023d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80023c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f805 	bl	80023de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80023d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3730      	adds	r7, #48	@ 0x30
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e002      	b.n	8002400 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800240c:	2101      	movs	r1, #1
 800240e:	69b8      	ldr	r0, [r7, #24]
 8002410:	f7ff fefe 	bl	8002210 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08e      	sub	sp, #56	@ 0x38
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002432:	2300      	movs	r3, #0
 8002434:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800243a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <xQueueGenericSend+0x34>
	__asm volatile
 8002440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002452:	bf00      	nop
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d103      	bne.n	8002466 <xQueueGenericSend+0x42>
 800245e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <xQueueGenericSend+0x46>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <xQueueGenericSend+0x48>
 800246a:	2300      	movs	r3, #0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10b      	bne.n	8002488 <xQueueGenericSend+0x64>
	__asm volatile
 8002470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002474:	f383 8811 	msr	BASEPRI, r3
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002482:	bf00      	nop
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d103      	bne.n	8002496 <xQueueGenericSend+0x72>
 800248e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <xQueueGenericSend+0x76>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <xQueueGenericSend+0x78>
 800249a:	2300      	movs	r3, #0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10b      	bne.n	80024b8 <xQueueGenericSend+0x94>
	__asm volatile
 80024a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	623b      	str	r3, [r7, #32]
}
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024b8:	f001 faf0 	bl	8003a9c <xTaskGetSchedulerState>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d102      	bne.n	80024c8 <xQueueGenericSend+0xa4>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <xQueueGenericSend+0xa8>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <xQueueGenericSend+0xaa>
 80024cc:	2300      	movs	r3, #0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10b      	bne.n	80024ea <xQueueGenericSend+0xc6>
	__asm volatile
 80024d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d6:	f383 8811 	msr	BASEPRI, r3
 80024da:	f3bf 8f6f 	isb	sy
 80024de:	f3bf 8f4f 	dsb	sy
 80024e2:	61fb      	str	r3, [r7, #28]
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	e7fd      	b.n	80024e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024ea:	f002 f845 	bl	8004578 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d302      	bcc.n	8002500 <xQueueGenericSend+0xdc>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d129      	bne.n	8002554 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002506:	f000 fa0f 	bl	8002928 <prvCopyDataToQueue>
 800250a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800250c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	2b00      	cmp	r3, #0
 8002512:	d010      	beq.n	8002536 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002516:	3324      	adds	r3, #36	@ 0x24
 8002518:	4618      	mov	r0, r3
 800251a:	f001 f8ff 	bl	800371c <xTaskRemoveFromEventList>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002524:	4b3f      	ldr	r3, [pc, #252]	@ (8002624 <xQueueGenericSend+0x200>)
 8002526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	e00a      	b.n	800254c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800253c:	4b39      	ldr	r3, [pc, #228]	@ (8002624 <xQueueGenericSend+0x200>)
 800253e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800254c:	f002 f846 	bl	80045dc <vPortExitCritical>
				return pdPASS;
 8002550:	2301      	movs	r3, #1
 8002552:	e063      	b.n	800261c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d103      	bne.n	8002562 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800255a:	f002 f83f 	bl	80045dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800255e:	2300      	movs	r3, #0
 8002560:	e05c      	b.n	800261c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002564:	2b00      	cmp	r3, #0
 8002566:	d106      	bne.n	8002576 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	4618      	mov	r0, r3
 800256e:	f001 f939 	bl	80037e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002572:	2301      	movs	r3, #1
 8002574:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002576:	f002 f831 	bl	80045dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800257a:	f000 fea9 	bl	80032d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800257e:	f001 fffb 	bl	8004578 <vPortEnterCritical>
 8002582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002584:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002588:	b25b      	sxtb	r3, r3
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d103      	bne.n	8002598 <xQueueGenericSend+0x174>
 8002590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800259e:	b25b      	sxtb	r3, r3
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d103      	bne.n	80025ae <xQueueGenericSend+0x18a>
 80025a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025ae:	f002 f815 	bl	80045dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025b2:	1d3a      	adds	r2, r7, #4
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f001 f928 	bl	8003810 <xTaskCheckForTimeOut>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d124      	bne.n	8002610 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025c8:	f000 faa6 	bl	8002b18 <prvIsQueueFull>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d018      	beq.n	8002604 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d4:	3310      	adds	r3, #16
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 f84c 	bl	8003678 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025e2:	f000 fa31 	bl	8002a48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80025e6:	f000 fe81 	bl	80032ec <xTaskResumeAll>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f af7c 	bne.w	80024ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80025f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <xQueueGenericSend+0x200>)
 80025f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	e772      	b.n	80024ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002604:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002606:	f000 fa1f 	bl	8002a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800260a:	f000 fe6f 	bl	80032ec <xTaskResumeAll>
 800260e:	e76c      	b.n	80024ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002610:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002612:	f000 fa19 	bl	8002a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002616:	f000 fe69 	bl	80032ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800261a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800261c:	4618      	mov	r0, r3
 800261e:	3738      	adds	r7, #56	@ 0x38
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	e000ed04 	.word	0xe000ed04

08002628 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b090      	sub	sp, #64	@ 0x40
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800263a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10b      	bne.n	8002658 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <xQueueGenericSendFromISR+0x3e>
 800265e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <xQueueGenericSendFromISR+0x42>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <xQueueGenericSendFromISR+0x44>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10b      	bne.n	8002688 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d103      	bne.n	8002696 <xQueueGenericSendFromISR+0x6e>
 800268e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <xQueueGenericSendFromISR+0x72>
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <xQueueGenericSendFromISR+0x74>
 800269a:	2300      	movs	r3, #0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10b      	bne.n	80026b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	623b      	str	r3, [r7, #32]
}
 80026b2:	bf00      	nop
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026b8:	f002 f83e 	bl	8004738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026bc:	f3ef 8211 	mrs	r2, BASEPRI
 80026c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	61fa      	str	r2, [r7, #28]
 80026d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d302      	bcc.n	80026ea <xQueueGenericSendFromISR+0xc2>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d12f      	bne.n	800274a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002700:	f000 f912 	bl	8002928 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002704:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d112      	bne.n	8002734 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800270e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	2b00      	cmp	r3, #0
 8002714:	d016      	beq.n	8002744 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002718:	3324      	adds	r3, #36	@ 0x24
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fffe 	bl	800371c <xTaskRemoveFromEventList>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00e      	beq.n	8002744 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e007      	b.n	8002744 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002734:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002738:	3301      	adds	r3, #1
 800273a:	b2db      	uxtb	r3, r3
 800273c:	b25a      	sxtb	r2, r3
 800273e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002744:	2301      	movs	r3, #1
 8002746:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002748:	e001      	b.n	800274e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800274a:	2300      	movs	r3, #0
 800274c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800274e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002750:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002758:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800275a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800275c:	4618      	mov	r0, r3
 800275e:	3740      	adds	r7, #64	@ 0x40
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08c      	sub	sp, #48	@ 0x30
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10b      	bne.n	8002796 <xQueueReceive+0x32>
	__asm volatile
 800277e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002782:	f383 8811 	msr	BASEPRI, r3
 8002786:	f3bf 8f6f 	isb	sy
 800278a:	f3bf 8f4f 	dsb	sy
 800278e:	623b      	str	r3, [r7, #32]
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	e7fd      	b.n	8002792 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d103      	bne.n	80027a4 <xQueueReceive+0x40>
 800279c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <xQueueReceive+0x44>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <xQueueReceive+0x46>
 80027a8:	2300      	movs	r3, #0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10b      	bne.n	80027c6 <xQueueReceive+0x62>
	__asm volatile
 80027ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	61fb      	str	r3, [r7, #28]
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	e7fd      	b.n	80027c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027c6:	f001 f969 	bl	8003a9c <xTaskGetSchedulerState>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <xQueueReceive+0x72>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <xQueueReceive+0x76>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <xQueueReceive+0x78>
 80027da:	2300      	movs	r3, #0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10b      	bne.n	80027f8 <xQueueReceive+0x94>
	__asm volatile
 80027e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e4:	f383 8811 	msr	BASEPRI, r3
 80027e8:	f3bf 8f6f 	isb	sy
 80027ec:	f3bf 8f4f 	dsb	sy
 80027f0:	61bb      	str	r3, [r7, #24]
}
 80027f2:	bf00      	nop
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027f8:	f001 febe 	bl	8004578 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01f      	beq.n	8002848 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800280c:	f000 f8f6 	bl	80029fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	1e5a      	subs	r2, r3, #1
 8002814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002816:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00f      	beq.n	8002840 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002822:	3310      	adds	r3, #16
 8002824:	4618      	mov	r0, r3
 8002826:	f000 ff79 	bl	800371c <xTaskRemoveFromEventList>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002830:	4b3c      	ldr	r3, [pc, #240]	@ (8002924 <xQueueReceive+0x1c0>)
 8002832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002840:	f001 fecc 	bl	80045dc <vPortExitCritical>
				return pdPASS;
 8002844:	2301      	movs	r3, #1
 8002846:	e069      	b.n	800291c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d103      	bne.n	8002856 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800284e:	f001 fec5 	bl	80045dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002852:	2300      	movs	r3, #0
 8002854:	e062      	b.n	800291c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d106      	bne.n	800286a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800285c:	f107 0310 	add.w	r3, r7, #16
 8002860:	4618      	mov	r0, r3
 8002862:	f000 ffbf 	bl	80037e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002866:	2301      	movs	r3, #1
 8002868:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800286a:	f001 feb7 	bl	80045dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800286e:	f000 fd2f 	bl	80032d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002872:	f001 fe81 	bl	8004578 <vPortEnterCritical>
 8002876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002878:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800287c:	b25b      	sxtb	r3, r3
 800287e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002882:	d103      	bne.n	800288c <xQueueReceive+0x128>
 8002884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800288c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002892:	b25b      	sxtb	r3, r3
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d103      	bne.n	80028a2 <xQueueReceive+0x13e>
 800289a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028a2:	f001 fe9b 	bl	80045dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028a6:	1d3a      	adds	r2, r7, #4
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 ffae 	bl	8003810 <xTaskCheckForTimeOut>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d123      	bne.n	8002902 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028bc:	f000 f916 	bl	8002aec <prvIsQueueEmpty>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d017      	beq.n	80028f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c8:	3324      	adds	r3, #36	@ 0x24
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fed2 	bl	8003678 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028d6:	f000 f8b7 	bl	8002a48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028da:	f000 fd07 	bl	80032ec <xTaskResumeAll>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d189      	bne.n	80027f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80028e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <xQueueReceive+0x1c0>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	e780      	b.n	80027f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80028f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028f8:	f000 f8a6 	bl	8002a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028fc:	f000 fcf6 	bl	80032ec <xTaskResumeAll>
 8002900:	e77a      	b.n	80027f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002904:	f000 f8a0 	bl	8002a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002908:	f000 fcf0 	bl	80032ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800290c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800290e:	f000 f8ed 	bl	8002aec <prvIsQueueEmpty>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	f43f af6f 	beq.w	80027f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800291a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800291c:	4618      	mov	r0, r3
 800291e:	3730      	adds	r7, #48	@ 0x30
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	e000ed04 	.word	0xe000ed04

08002928 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d14d      	bne.n	80029ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	4618      	mov	r0, r3
 8002954:	f001 f8c0 	bl	8003ad8 <xTaskPriorityDisinherit>
 8002958:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	e043      	b.n	80029ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d119      	bne.n	800299c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6858      	ldr	r0, [r3, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	461a      	mov	r2, r3
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	f002 f93c 	bl	8004bf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	441a      	add	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	d32b      	bcc.n	80029ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	e026      	b.n	80029ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68d8      	ldr	r0, [r3, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	461a      	mov	r2, r3
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	f002 f922 	bl	8004bf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	425b      	negs	r3, r3
 80029b6:	441a      	add	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d207      	bcs.n	80029d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	425b      	negs	r3, r3
 80029d2:	441a      	add	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d105      	bne.n	80029ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80029f2:	697b      	ldr	r3, [r7, #20]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d018      	beq.n	8002a40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	441a      	add	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d303      	bcc.n	8002a30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68d9      	ldr	r1, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	461a      	mov	r2, r3
 8002a3a:	6838      	ldr	r0, [r7, #0]
 8002a3c:	f002 f8d8 	bl	8004bf0 <memcpy>
	}
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a50:	f001 fd92 	bl	8004578 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a5c:	e011      	b.n	8002a82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d012      	beq.n	8002a8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3324      	adds	r3, #36	@ 0x24
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fe56 	bl	800371c <xTaskRemoveFromEventList>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a76:	f000 ff2f 	bl	80038d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	dce9      	bgt.n	8002a5e <prvUnlockQueue+0x16>
 8002a8a:	e000      	b.n	8002a8e <prvUnlockQueue+0x46>
					break;
 8002a8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	22ff      	movs	r2, #255	@ 0xff
 8002a92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002a96:	f001 fda1 	bl	80045dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a9a:	f001 fd6d 	bl	8004578 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002aa4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002aa6:	e011      	b.n	8002acc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d012      	beq.n	8002ad6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3310      	adds	r3, #16
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fe31 	bl	800371c <xTaskRemoveFromEventList>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ac0:	f000 ff0a 	bl	80038d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ac4:	7bbb      	ldrb	r3, [r7, #14]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	dce9      	bgt.n	8002aa8 <prvUnlockQueue+0x60>
 8002ad4:	e000      	b.n	8002ad8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ad6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	22ff      	movs	r2, #255	@ 0xff
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002ae0:	f001 fd7c 	bl	80045dc <vPortExitCritical>
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002af4:	f001 fd40 	bl	8004578 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b00:	2301      	movs	r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	e001      	b.n	8002b0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b0a:	f001 fd67 	bl	80045dc <vPortExitCritical>

	return xReturn;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b20:	f001 fd2a 	bl	8004578 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d102      	bne.n	8002b36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b30:	2301      	movs	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	e001      	b.n	8002b3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b3a:	f001 fd4f 	bl	80045dc <vPortExitCritical>

	return xReturn;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	e014      	b.n	8002b82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b58:	4a0f      	ldr	r2, [pc, #60]	@ (8002b98 <vQueueAddToRegistry+0x50>)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10b      	bne.n	8002b7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b64:	490c      	ldr	r1, [pc, #48]	@ (8002b98 <vQueueAddToRegistry+0x50>)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b98 <vQueueAddToRegistry+0x50>)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b7a:	e006      	b.n	8002b8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b07      	cmp	r3, #7
 8002b86:	d9e7      	bls.n	8002b58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000738 	.word	0x20000738

08002b9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002bac:	f001 fce4 	bl	8004578 <vPortEnterCritical>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bb6:	b25b      	sxtb	r3, r3
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d103      	bne.n	8002bc6 <vQueueWaitForMessageRestricted+0x2a>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bcc:	b25b      	sxtb	r3, r3
 8002bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd2:	d103      	bne.n	8002bdc <vQueueWaitForMessageRestricted+0x40>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bdc:	f001 fcfe 	bl	80045dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	3324      	adds	r3, #36	@ 0x24
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fd67 	bl	80036c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002bf6:	6978      	ldr	r0, [r7, #20]
 8002bf8:	f7ff ff26 	bl	8002a48 <prvUnlockQueue>
	}
 8002bfc:	bf00      	nop
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08e      	sub	sp, #56	@ 0x38
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10b      	bne.n	8002c30 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	623b      	str	r3, [r7, #32]
}
 8002c2a:	bf00      	nop
 8002c2c:	bf00      	nop
 8002c2e:	e7fd      	b.n	8002c2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <xTaskCreateStatic+0x4a>
	__asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	61fb      	str	r3, [r7, #28]
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	e7fd      	b.n	8002c4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c4e:	235c      	movs	r3, #92	@ 0x5c
 8002c50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b5c      	cmp	r3, #92	@ 0x5c
 8002c56:	d00b      	beq.n	8002c70 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	61bb      	str	r3, [r7, #24]
}
 8002c6a:	bf00      	nop
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01e      	beq.n	8002cb6 <xTaskCreateStatic+0xb2>
 8002c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01b      	beq.n	8002cb6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c90:	2300      	movs	r3, #0
 8002c92:	9303      	str	r3, [sp, #12]
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	9302      	str	r3, [sp, #8]
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f850 	bl	8002d4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002cb0:	f000 f8de 	bl	8002e70 <prvAddNewTaskToReadyList>
 8002cb4:	e001      	b.n	8002cba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002cba:	697b      	ldr	r3, [r7, #20]
	}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3728      	adds	r7, #40	@ 0x28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08c      	sub	sp, #48	@ 0x30
 8002cc8:	af04      	add	r7, sp, #16
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 fd6f 	bl	80047bc <pvPortMalloc>
 8002cde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00e      	beq.n	8002d04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ce6:	205c      	movs	r0, #92	@ 0x5c
 8002ce8:	f001 fd68 	bl	80047bc <pvPortMalloc>
 8002cec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cfa:	e005      	b.n	8002d08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cfc:	6978      	ldr	r0, [r7, #20]
 8002cfe:	f001 fe2b 	bl	8004958 <vPortFree>
 8002d02:	e001      	b.n	8002d08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d017      	beq.n	8002d3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d16:	88fa      	ldrh	r2, [r7, #6]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	9303      	str	r3, [sp, #12]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	9302      	str	r3, [sp, #8]
 8002d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f80e 	bl	8002d4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d32:	69f8      	ldr	r0, [r7, #28]
 8002d34:	f000 f89c 	bl	8002e70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	e002      	b.n	8002d44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d44:	69bb      	ldr	r3, [r7, #24]
	}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3720      	adds	r7, #32
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b088      	sub	sp, #32
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	461a      	mov	r2, r3
 8002d66:	21a5      	movs	r1, #165	@ 0xa5
 8002d68:	f001 ff16 	bl	8004b98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d76:	3b01      	subs	r3, #1
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f023 0307 	bic.w	r3, r3, #7
 8002d84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00b      	beq.n	8002da8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	617b      	str	r3, [r7, #20]
}
 8002da2:	bf00      	nop
 8002da4:	bf00      	nop
 8002da6:	e7fd      	b.n	8002da4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01f      	beq.n	8002dee <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	e012      	b.n	8002dda <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	4413      	add	r3, r2
 8002dba:	7819      	ldrb	r1, [r3, #0]
 8002dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3334      	adds	r3, #52	@ 0x34
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	4413      	add	r3, r2
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	2b0f      	cmp	r3, #15
 8002dde:	d9e9      	bls.n	8002db4 <prvInitialiseNewTask+0x66>
 8002de0:	e000      	b.n	8002de4 <prvInitialiseNewTask+0x96>
			{
				break;
 8002de2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dec:	e003      	b.n	8002df6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df8:	2b37      	cmp	r3, #55	@ 0x37
 8002dfa:	d901      	bls.n	8002e00 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dfc:	2337      	movs	r3, #55	@ 0x37
 8002dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e04:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e0a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0e:	2200      	movs	r2, #0
 8002e10:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e14:	3304      	adds	r3, #4
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff f966 	bl	80020e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1e:	3318      	adds	r3, #24
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff f961 	bl	80020e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e3a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3e:	2200      	movs	r2, #0
 8002e40:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	68f9      	ldr	r1, [r7, #12]
 8002e4e:	69b8      	ldr	r0, [r7, #24]
 8002e50:	f001 fa60 	bl	8004314 <pxPortInitialiseStack>
 8002e54:	4602      	mov	r2, r0
 8002e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e66:	bf00      	nop
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e78:	f001 fb7e 	bl	8004578 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f34 <prvAddNewTaskToReadyList+0xc4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	4a2c      	ldr	r2, [pc, #176]	@ (8002f34 <prvAddNewTaskToReadyList+0xc4>)
 8002e84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e86:	4b2c      	ldr	r3, [pc, #176]	@ (8002f38 <prvAddNewTaskToReadyList+0xc8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f38 <prvAddNewTaskToReadyList+0xc8>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e94:	4b27      	ldr	r3, [pc, #156]	@ (8002f34 <prvAddNewTaskToReadyList+0xc4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d110      	bne.n	8002ebe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e9c:	f000 fd40 	bl	8003920 <prvInitialiseTaskLists>
 8002ea0:	e00d      	b.n	8002ebe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ea2:	4b26      	ldr	r3, [pc, #152]	@ (8002f3c <prvAddNewTaskToReadyList+0xcc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002eaa:	4b23      	ldr	r3, [pc, #140]	@ (8002f38 <prvAddNewTaskToReadyList+0xc8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d802      	bhi.n	8002ebe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f38 <prvAddNewTaskToReadyList+0xc8>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ebe:	4b20      	ldr	r3, [pc, #128]	@ (8002f40 <prvAddNewTaskToReadyList+0xd0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8002f40 <prvAddNewTaskToReadyList+0xd0>)
 8002ec6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f40 <prvAddNewTaskToReadyList+0xd0>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f44 <prvAddNewTaskToReadyList+0xd4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d903      	bls.n	8002ee4 <prvAddNewTaskToReadyList+0x74>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	4a18      	ldr	r2, [pc, #96]	@ (8002f44 <prvAddNewTaskToReadyList+0xd4>)
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4a15      	ldr	r2, [pc, #84]	@ (8002f48 <prvAddNewTaskToReadyList+0xd8>)
 8002ef2:	441a      	add	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f7ff f901 	bl	8002102 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f00:	f001 fb6c 	bl	80045dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f04:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <prvAddNewTaskToReadyList+0xcc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <prvAddNewTaskToReadyList+0xc8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d207      	bcs.n	8002f2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f4c <prvAddNewTaskToReadyList+0xdc>)
 8002f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000c4c 	.word	0x20000c4c
 8002f38:	20000778 	.word	0x20000778
 8002f3c:	20000c58 	.word	0x20000c58
 8002f40:	20000c68 	.word	0x20000c68
 8002f44:	20000c54 	.word	0x20000c54
 8002f48:	2000077c 	.word	0x2000077c
 8002f4c:	e000ed04 	.word	0xe000ed04

08002f50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d018      	beq.n	8002f94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f62:	4b14      	ldr	r3, [pc, #80]	@ (8002fb4 <vTaskDelay+0x64>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <vTaskDelay+0x32>
	__asm volatile
 8002f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	60bb      	str	r3, [r7, #8]
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	e7fd      	b.n	8002f7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f82:	f000 f9a5 	bl	80032d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f86:	2100      	movs	r1, #0
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fe15 	bl	8003bb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f8e:	f000 f9ad 	bl	80032ec <xTaskResumeAll>
 8002f92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d107      	bne.n	8002faa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002f9a:	4b07      	ldr	r3, [pc, #28]	@ (8002fb8 <vTaskDelay+0x68>)
 8002f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000c74 	.word	0x20000c74
 8002fb8:	e000ed04 	.word	0xe000ed04

08002fbc <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8002fc4:	f001 fad8 	bl	8004578 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <uxTaskPriorityGet+0x18>
 8002fce:	4b07      	ldr	r3, [pc, #28]	@ (8002fec <uxTaskPriorityGet+0x30>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	e000      	b.n	8002fd6 <uxTaskPriorityGet+0x1a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fdc:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8002fde:	f001 fafd 	bl	80045dc <vPortExitCritical>

		return uxReturn;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
	}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000778 	.word	0x20000778

08002ff0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002ff8:	f001 fabe 	bl	8004578 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d102      	bne.n	8003008 <vTaskSuspend+0x18>
 8003002:	4b30      	ldr	r3, [pc, #192]	@ (80030c4 <vTaskSuspend+0xd4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	e000      	b.n	800300a <vTaskSuspend+0x1a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3304      	adds	r3, #4
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff f8d3 	bl	80021bc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3318      	adds	r3, #24
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff f8ca 	bl	80021bc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3304      	adds	r3, #4
 800302c:	4619      	mov	r1, r3
 800302e:	4826      	ldr	r0, [pc, #152]	@ (80030c8 <vTaskSuspend+0xd8>)
 8003030:	f7ff f867 	bl	8002102 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d103      	bne.n	8003048 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003048:	f001 fac8 	bl	80045dc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800304c:	4b1f      	ldr	r3, [pc, #124]	@ (80030cc <vTaskSuspend+0xdc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003054:	f001 fa90 	bl	8004578 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003058:	f000 fd00 	bl	8003a5c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800305c:	f001 fabe 	bl	80045dc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003060:	4b18      	ldr	r3, [pc, #96]	@ (80030c4 <vTaskSuspend+0xd4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	429a      	cmp	r2, r3
 8003068:	d128      	bne.n	80030bc <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800306a:	4b18      	ldr	r3, [pc, #96]	@ (80030cc <vTaskSuspend+0xdc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d018      	beq.n	80030a4 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003072:	4b17      	ldr	r3, [pc, #92]	@ (80030d0 <vTaskSuspend+0xe0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <vTaskSuspend+0xa2>
	__asm volatile
 800307a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307e:	f383 8811 	msr	BASEPRI, r3
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	60bb      	str	r3, [r7, #8]
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	e7fd      	b.n	800308e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8003092:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <vTaskSuspend+0xe4>)
 8003094:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030a2:	e00b      	b.n	80030bc <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80030a4:	4b08      	ldr	r3, [pc, #32]	@ (80030c8 <vTaskSuspend+0xd8>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <vTaskSuspend+0xe8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d103      	bne.n	80030b8 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 80030b0:	4b04      	ldr	r3, [pc, #16]	@ (80030c4 <vTaskSuspend+0xd4>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
	}
 80030b6:	e001      	b.n	80030bc <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 80030b8:	f000 fa80 	bl	80035bc <vTaskSwitchContext>
	}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000778 	.word	0x20000778
 80030c8:	20000c38 	.word	0x20000c38
 80030cc:	20000c58 	.word	0x20000c58
 80030d0:	20000c74 	.word	0x20000c74
 80030d4:	e000ed04 	.word	0xe000ed04
 80030d8:	20000c4c 	.word	0x20000c4c

080030dc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10b      	bne.n	800310a <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	60fb      	str	r3, [r7, #12]
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	e7fd      	b.n	8003106 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	4a0a      	ldr	r2, [pc, #40]	@ (8003138 <prvTaskIsTaskSuspended+0x5c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10a      	bne.n	800312a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003118:	4a08      	ldr	r2, [pc, #32]	@ (800313c <prvTaskIsTaskSuspended+0x60>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d005      	beq.n	800312a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8003126:	2301      	movs	r3, #1
 8003128:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800312a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800312c:	4618      	mov	r0, r3
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	20000c38 	.word	0x20000c38
 800313c:	20000c0c 	.word	0x20000c0c

08003140 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10b      	bne.n	800316a <vTaskResume+0x2a>
	__asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	60bb      	str	r3, [r7, #8]
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	e7fd      	b.n	8003166 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800316a:	4b21      	ldr	r3, [pc, #132]	@ (80031f0 <vTaskResume+0xb0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	429a      	cmp	r2, r3
 8003172:	d038      	beq.n	80031e6 <vTaskResume+0xa6>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d035      	beq.n	80031e6 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800317a:	f001 f9fd 	bl	8004578 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f7ff ffac 	bl	80030dc <prvTaskIsTaskSuspended>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02b      	beq.n	80031e2 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	3304      	adds	r3, #4
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff f814 	bl	80021bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003198:	4b16      	ldr	r3, [pc, #88]	@ (80031f4 <vTaskResume+0xb4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d903      	bls.n	80031a8 <vTaskResume+0x68>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	4a13      	ldr	r2, [pc, #76]	@ (80031f4 <vTaskResume+0xb4>)
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4a10      	ldr	r2, [pc, #64]	@ (80031f8 <vTaskResume+0xb8>)
 80031b6:	441a      	add	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7fe ff9f 	bl	8002102 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031c8:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <vTaskResume+0xb0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d307      	bcc.n	80031e2 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80031d2:	4b0a      	ldr	r3, [pc, #40]	@ (80031fc <vTaskResume+0xbc>)
 80031d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80031e2:	f001 f9fb 	bl	80045dc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000778 	.word	0x20000778
 80031f4:	20000c54 	.word	0x20000c54
 80031f8:	2000077c 	.word	0x2000077c
 80031fc:	e000ed04 	.word	0xe000ed04

08003200 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	@ 0x28
 8003204:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800320e:	463a      	mov	r2, r7
 8003210:	1d39      	adds	r1, r7, #4
 8003212:	f107 0308 	add.w	r3, r7, #8
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe ff12 	bl	8002040 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800321c:	6839      	ldr	r1, [r7, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	9202      	str	r2, [sp, #8]
 8003224:	9301      	str	r3, [sp, #4]
 8003226:	2300      	movs	r3, #0
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	2300      	movs	r3, #0
 800322c:	460a      	mov	r2, r1
 800322e:	4922      	ldr	r1, [pc, #136]	@ (80032b8 <vTaskStartScheduler+0xb8>)
 8003230:	4822      	ldr	r0, [pc, #136]	@ (80032bc <vTaskStartScheduler+0xbc>)
 8003232:	f7ff fce7 	bl	8002c04 <xTaskCreateStatic>
 8003236:	4603      	mov	r3, r0
 8003238:	4a21      	ldr	r2, [pc, #132]	@ (80032c0 <vTaskStartScheduler+0xc0>)
 800323a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800323c:	4b20      	ldr	r3, [pc, #128]	@ (80032c0 <vTaskStartScheduler+0xc0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003244:	2301      	movs	r3, #1
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	e001      	b.n	800324e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d102      	bne.n	800325a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003254:	f000 fd04 	bl	8003c60 <xTimerCreateTimerTask>
 8003258:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d116      	bne.n	800328e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	613b      	str	r3, [r7, #16]
}
 8003272:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003274:	4b13      	ldr	r3, [pc, #76]	@ (80032c4 <vTaskStartScheduler+0xc4>)
 8003276:	f04f 32ff 	mov.w	r2, #4294967295
 800327a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800327c:	4b12      	ldr	r3, [pc, #72]	@ (80032c8 <vTaskStartScheduler+0xc8>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003282:	4b12      	ldr	r3, [pc, #72]	@ (80032cc <vTaskStartScheduler+0xcc>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003288:	f001 f8d2 	bl	8004430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800328c:	e00f      	b.n	80032ae <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d10b      	bne.n	80032ae <vTaskStartScheduler+0xae>
	__asm volatile
 8003296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	60fb      	str	r3, [r7, #12]
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	e7fd      	b.n	80032aa <vTaskStartScheduler+0xaa>
}
 80032ae:	bf00      	nop
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	08004c34 	.word	0x08004c34
 80032bc:	080038f1 	.word	0x080038f1
 80032c0:	20000c70 	.word	0x20000c70
 80032c4:	20000c6c 	.word	0x20000c6c
 80032c8:	20000c58 	.word	0x20000c58
 80032cc:	20000c50 	.word	0x20000c50

080032d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80032d4:	4b04      	ldr	r3, [pc, #16]	@ (80032e8 <vTaskSuspendAll+0x18>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	4a03      	ldr	r2, [pc, #12]	@ (80032e8 <vTaskSuspendAll+0x18>)
 80032dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80032de:	bf00      	nop
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	20000c74 	.word	0x20000c74

080032ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80032fa:	4b42      	ldr	r3, [pc, #264]	@ (8003404 <xTaskResumeAll+0x118>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <xTaskResumeAll+0x2e>
	__asm volatile
 8003302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	603b      	str	r3, [r7, #0]
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	e7fd      	b.n	8003316 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800331a:	f001 f92d 	bl	8004578 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800331e:	4b39      	ldr	r3, [pc, #228]	@ (8003404 <xTaskResumeAll+0x118>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3b01      	subs	r3, #1
 8003324:	4a37      	ldr	r2, [pc, #220]	@ (8003404 <xTaskResumeAll+0x118>)
 8003326:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003328:	4b36      	ldr	r3, [pc, #216]	@ (8003404 <xTaskResumeAll+0x118>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d162      	bne.n	80033f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003330:	4b35      	ldr	r3, [pc, #212]	@ (8003408 <xTaskResumeAll+0x11c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d05e      	beq.n	80033f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003338:	e02f      	b.n	800339a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800333a:	4b34      	ldr	r3, [pc, #208]	@ (800340c <xTaskResumeAll+0x120>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3318      	adds	r3, #24
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe ff38 	bl	80021bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3304      	adds	r3, #4
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe ff33 	bl	80021bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800335a:	4b2d      	ldr	r3, [pc, #180]	@ (8003410 <xTaskResumeAll+0x124>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d903      	bls.n	800336a <xTaskResumeAll+0x7e>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003366:	4a2a      	ldr	r2, [pc, #168]	@ (8003410 <xTaskResumeAll+0x124>)
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4a27      	ldr	r2, [pc, #156]	@ (8003414 <xTaskResumeAll+0x128>)
 8003378:	441a      	add	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3304      	adds	r3, #4
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f7fe febe 	bl	8002102 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800338a:	4b23      	ldr	r3, [pc, #140]	@ (8003418 <xTaskResumeAll+0x12c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003390:	429a      	cmp	r2, r3
 8003392:	d302      	bcc.n	800339a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003394:	4b21      	ldr	r3, [pc, #132]	@ (800341c <xTaskResumeAll+0x130>)
 8003396:	2201      	movs	r2, #1
 8003398:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800339a:	4b1c      	ldr	r3, [pc, #112]	@ (800340c <xTaskResumeAll+0x120>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1cb      	bne.n	800333a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033a8:	f000 fb58 	bl	8003a5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003420 <xTaskResumeAll+0x134>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d010      	beq.n	80033da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033b8:	f000 f846 	bl	8003448 <xTaskIncrementTick>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80033c2:	4b16      	ldr	r3, [pc, #88]	@ (800341c <xTaskResumeAll+0x130>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f1      	bne.n	80033b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80033d4:	4b12      	ldr	r3, [pc, #72]	@ (8003420 <xTaskResumeAll+0x134>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033da:	4b10      	ldr	r3, [pc, #64]	@ (800341c <xTaskResumeAll+0x130>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033e2:	2301      	movs	r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003424 <xTaskResumeAll+0x138>)
 80033e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033f6:	f001 f8f1 	bl	80045dc <vPortExitCritical>

	return xAlreadyYielded;
 80033fa:	68bb      	ldr	r3, [r7, #8]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20000c74 	.word	0x20000c74
 8003408:	20000c4c 	.word	0x20000c4c
 800340c:	20000c0c 	.word	0x20000c0c
 8003410:	20000c54 	.word	0x20000c54
 8003414:	2000077c 	.word	0x2000077c
 8003418:	20000778 	.word	0x20000778
 800341c:	20000c60 	.word	0x20000c60
 8003420:	20000c5c 	.word	0x20000c5c
 8003424:	e000ed04 	.word	0xe000ed04

08003428 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800342e:	4b05      	ldr	r3, [pc, #20]	@ (8003444 <xTaskGetTickCount+0x1c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003434:	687b      	ldr	r3, [r7, #4]
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000c50 	.word	0x20000c50

08003448 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003452:	4b4f      	ldr	r3, [pc, #316]	@ (8003590 <xTaskIncrementTick+0x148>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f040 8090 	bne.w	800357c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800345c:	4b4d      	ldr	r3, [pc, #308]	@ (8003594 <xTaskIncrementTick+0x14c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3301      	adds	r3, #1
 8003462:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003464:	4a4b      	ldr	r2, [pc, #300]	@ (8003594 <xTaskIncrementTick+0x14c>)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d121      	bne.n	80034b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003470:	4b49      	ldr	r3, [pc, #292]	@ (8003598 <xTaskIncrementTick+0x150>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00b      	beq.n	8003492 <xTaskIncrementTick+0x4a>
	__asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	603b      	str	r3, [r7, #0]
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	e7fd      	b.n	800348e <xTaskIncrementTick+0x46>
 8003492:	4b41      	ldr	r3, [pc, #260]	@ (8003598 <xTaskIncrementTick+0x150>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	4b40      	ldr	r3, [pc, #256]	@ (800359c <xTaskIncrementTick+0x154>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a3e      	ldr	r2, [pc, #248]	@ (8003598 <xTaskIncrementTick+0x150>)
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	4a3e      	ldr	r2, [pc, #248]	@ (800359c <xTaskIncrementTick+0x154>)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4b3e      	ldr	r3, [pc, #248]	@ (80035a0 <xTaskIncrementTick+0x158>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3301      	adds	r3, #1
 80034ac:	4a3c      	ldr	r2, [pc, #240]	@ (80035a0 <xTaskIncrementTick+0x158>)
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	f000 fad4 	bl	8003a5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034b4:	4b3b      	ldr	r3, [pc, #236]	@ (80035a4 <xTaskIncrementTick+0x15c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d349      	bcc.n	8003552 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034be:	4b36      	ldr	r3, [pc, #216]	@ (8003598 <xTaskIncrementTick+0x150>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d104      	bne.n	80034d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034c8:	4b36      	ldr	r3, [pc, #216]	@ (80035a4 <xTaskIncrementTick+0x15c>)
 80034ca:	f04f 32ff 	mov.w	r2, #4294967295
 80034ce:	601a      	str	r2, [r3, #0]
					break;
 80034d0:	e03f      	b.n	8003552 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034d2:	4b31      	ldr	r3, [pc, #196]	@ (8003598 <xTaskIncrementTick+0x150>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d203      	bcs.n	80034f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034ea:	4a2e      	ldr	r2, [pc, #184]	@ (80035a4 <xTaskIncrementTick+0x15c>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034f0:	e02f      	b.n	8003552 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	3304      	adds	r3, #4
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fe60 	bl	80021bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	3318      	adds	r3, #24
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fe57 	bl	80021bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003512:	4b25      	ldr	r3, [pc, #148]	@ (80035a8 <xTaskIncrementTick+0x160>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d903      	bls.n	8003522 <xTaskIncrementTick+0xda>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351e:	4a22      	ldr	r2, [pc, #136]	@ (80035a8 <xTaskIncrementTick+0x160>)
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4a1f      	ldr	r2, [pc, #124]	@ (80035ac <xTaskIncrementTick+0x164>)
 8003530:	441a      	add	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3304      	adds	r3, #4
 8003536:	4619      	mov	r1, r3
 8003538:	4610      	mov	r0, r2
 800353a:	f7fe fde2 	bl	8002102 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003542:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <xTaskIncrementTick+0x168>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	429a      	cmp	r2, r3
 800354a:	d3b8      	bcc.n	80034be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800354c:	2301      	movs	r3, #1
 800354e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003550:	e7b5      	b.n	80034be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003552:	4b17      	ldr	r3, [pc, #92]	@ (80035b0 <xTaskIncrementTick+0x168>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003558:	4914      	ldr	r1, [pc, #80]	@ (80035ac <xTaskIncrementTick+0x164>)
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d901      	bls.n	800356e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800356a:	2301      	movs	r3, #1
 800356c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800356e:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <xTaskIncrementTick+0x16c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003576:	2301      	movs	r3, #1
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	e004      	b.n	8003586 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800357c:	4b0e      	ldr	r3, [pc, #56]	@ (80035b8 <xTaskIncrementTick+0x170>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	4a0d      	ldr	r2, [pc, #52]	@ (80035b8 <xTaskIncrementTick+0x170>)
 8003584:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003586:	697b      	ldr	r3, [r7, #20]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000c74 	.word	0x20000c74
 8003594:	20000c50 	.word	0x20000c50
 8003598:	20000c04 	.word	0x20000c04
 800359c:	20000c08 	.word	0x20000c08
 80035a0:	20000c64 	.word	0x20000c64
 80035a4:	20000c6c 	.word	0x20000c6c
 80035a8:	20000c54 	.word	0x20000c54
 80035ac:	2000077c 	.word	0x2000077c
 80035b0:	20000778 	.word	0x20000778
 80035b4:	20000c60 	.word	0x20000c60
 80035b8:	20000c5c 	.word	0x20000c5c

080035bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035c2:	4b28      	ldr	r3, [pc, #160]	@ (8003664 <vTaskSwitchContext+0xa8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035ca:	4b27      	ldr	r3, [pc, #156]	@ (8003668 <vTaskSwitchContext+0xac>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035d0:	e042      	b.n	8003658 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80035d2:	4b25      	ldr	r3, [pc, #148]	@ (8003668 <vTaskSwitchContext+0xac>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d8:	4b24      	ldr	r3, [pc, #144]	@ (800366c <vTaskSwitchContext+0xb0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	e011      	b.n	8003604 <vTaskSwitchContext+0x48>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <vTaskSwitchContext+0x42>
	__asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	607b      	str	r3, [r7, #4]
}
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
 80035fc:	e7fd      	b.n	80035fa <vTaskSwitchContext+0x3e>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3b01      	subs	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	491a      	ldr	r1, [pc, #104]	@ (8003670 <vTaskSwitchContext+0xb4>)
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0e3      	beq.n	80035e0 <vTaskSwitchContext+0x24>
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4a13      	ldr	r2, [pc, #76]	@ (8003670 <vTaskSwitchContext+0xb4>)
 8003624:	4413      	add	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3308      	adds	r3, #8
 800363a:	429a      	cmp	r2, r3
 800363c:	d104      	bne.n	8003648 <vTaskSwitchContext+0x8c>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4a09      	ldr	r2, [pc, #36]	@ (8003674 <vTaskSwitchContext+0xb8>)
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4a06      	ldr	r2, [pc, #24]	@ (800366c <vTaskSwitchContext+0xb0>)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6013      	str	r3, [r2, #0]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	20000c74 	.word	0x20000c74
 8003668:	20000c60 	.word	0x20000c60
 800366c:	20000c54 	.word	0x20000c54
 8003670:	2000077c 	.word	0x2000077c
 8003674:	20000778 	.word	0x20000778

08003678 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	60fb      	str	r3, [r7, #12]
}
 800369a:	bf00      	nop
 800369c:	bf00      	nop
 800369e:	e7fd      	b.n	800369c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036a0:	4b07      	ldr	r3, [pc, #28]	@ (80036c0 <vTaskPlaceOnEventList+0x48>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3318      	adds	r3, #24
 80036a6:	4619      	mov	r1, r3
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7fe fd4e 	bl	800214a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036ae:	2101      	movs	r1, #1
 80036b0:	6838      	ldr	r0, [r7, #0]
 80036b2:	f000 fa81 	bl	8003bb8 <prvAddCurrentTaskToDelayedList>
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000778 	.word	0x20000778

080036c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10b      	bne.n	80036ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	617b      	str	r3, [r7, #20]
}
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	e7fd      	b.n	80036ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <vTaskPlaceOnEventListRestricted+0x54>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3318      	adds	r3, #24
 80036f4:	4619      	mov	r1, r3
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f7fe fd03 	bl	8002102 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003702:	f04f 33ff 	mov.w	r3, #4294967295
 8003706:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	68b8      	ldr	r0, [r7, #8]
 800370c:	f000 fa54 	bl	8003bb8 <prvAddCurrentTaskToDelayedList>
	}
 8003710:	bf00      	nop
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000778 	.word	0x20000778

0800371c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10b      	bne.n	800374a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	60fb      	str	r3, [r7, #12]
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	e7fd      	b.n	8003746 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	3318      	adds	r3, #24
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe fd34 	bl	80021bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003754:	4b1d      	ldr	r3, [pc, #116]	@ (80037cc <xTaskRemoveFromEventList+0xb0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d11d      	bne.n	8003798 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3304      	adds	r3, #4
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe fd2b 	bl	80021bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800376a:	4b19      	ldr	r3, [pc, #100]	@ (80037d0 <xTaskRemoveFromEventList+0xb4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d903      	bls.n	800377a <xTaskRemoveFromEventList+0x5e>
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003776:	4a16      	ldr	r2, [pc, #88]	@ (80037d0 <xTaskRemoveFromEventList+0xb4>)
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4a13      	ldr	r2, [pc, #76]	@ (80037d4 <xTaskRemoveFromEventList+0xb8>)
 8003788:	441a      	add	r2, r3
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	3304      	adds	r3, #4
 800378e:	4619      	mov	r1, r3
 8003790:	4610      	mov	r0, r2
 8003792:	f7fe fcb6 	bl	8002102 <vListInsertEnd>
 8003796:	e005      	b.n	80037a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	3318      	adds	r3, #24
 800379c:	4619      	mov	r1, r3
 800379e:	480e      	ldr	r0, [pc, #56]	@ (80037d8 <xTaskRemoveFromEventList+0xbc>)
 80037a0:	f7fe fcaf 	bl	8002102 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a8:	4b0c      	ldr	r3, [pc, #48]	@ (80037dc <xTaskRemoveFromEventList+0xc0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d905      	bls.n	80037be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80037b2:	2301      	movs	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80037b6:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <xTaskRemoveFromEventList+0xc4>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e001      	b.n	80037c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80037c2:	697b      	ldr	r3, [r7, #20]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000c74 	.word	0x20000c74
 80037d0:	20000c54 	.word	0x20000c54
 80037d4:	2000077c 	.word	0x2000077c
 80037d8:	20000c0c 	.word	0x20000c0c
 80037dc:	20000778 	.word	0x20000778
 80037e0:	20000c60 	.word	0x20000c60

080037e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037ec:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <vTaskInternalSetTimeOutState+0x24>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037f4:	4b05      	ldr	r3, [pc, #20]	@ (800380c <vTaskInternalSetTimeOutState+0x28>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	605a      	str	r2, [r3, #4]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	20000c64 	.word	0x20000c64
 800380c:	20000c50 	.word	0x20000c50

08003810 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10b      	bne.n	8003838 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	613b      	str	r3, [r7, #16]
}
 8003832:	bf00      	nop
 8003834:	bf00      	nop
 8003836:	e7fd      	b.n	8003834 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10b      	bne.n	8003856 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	60fb      	str	r3, [r7, #12]
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	e7fd      	b.n	8003852 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003856:	f000 fe8f 	bl	8004578 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800385a:	4b1d      	ldr	r3, [pc, #116]	@ (80038d0 <xTaskCheckForTimeOut+0xc0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003872:	d102      	bne.n	800387a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003874:	2300      	movs	r3, #0
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	e023      	b.n	80038c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4b15      	ldr	r3, [pc, #84]	@ (80038d4 <xTaskCheckForTimeOut+0xc4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d007      	beq.n	8003896 <xTaskCheckForTimeOut+0x86>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	e015      	b.n	80038c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	429a      	cmp	r2, r3
 800389e:	d20b      	bcs.n	80038b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	1ad2      	subs	r2, r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff99 	bl	80037e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	e004      	b.n	80038c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80038be:	2301      	movs	r3, #1
 80038c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80038c2:	f000 fe8b 	bl	80045dc <vPortExitCritical>

	return xReturn;
 80038c6:	69fb      	ldr	r3, [r7, #28]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000c50 	.word	0x20000c50
 80038d4:	20000c64 	.word	0x20000c64

080038d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80038dc:	4b03      	ldr	r3, [pc, #12]	@ (80038ec <vTaskMissedYield+0x14>)
 80038de:	2201      	movs	r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
}
 80038e2:	bf00      	nop
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	20000c60 	.word	0x20000c60

080038f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038f8:	f000 f852 	bl	80039a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038fc:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <prvIdleTask+0x28>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d9f9      	bls.n	80038f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003904:	4b05      	ldr	r3, [pc, #20]	@ (800391c <prvIdleTask+0x2c>)
 8003906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003914:	e7f0      	b.n	80038f8 <prvIdleTask+0x8>
 8003916:	bf00      	nop
 8003918:	2000077c 	.word	0x2000077c
 800391c:	e000ed04 	.word	0xe000ed04

08003920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	e00c      	b.n	8003946 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4a12      	ldr	r2, [pc, #72]	@ (8003980 <prvInitialiseTaskLists+0x60>)
 8003938:	4413      	add	r3, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fbb4 	bl	80020a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3301      	adds	r3, #1
 8003944:	607b      	str	r3, [r7, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b37      	cmp	r3, #55	@ 0x37
 800394a:	d9ef      	bls.n	800392c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800394c:	480d      	ldr	r0, [pc, #52]	@ (8003984 <prvInitialiseTaskLists+0x64>)
 800394e:	f7fe fbab 	bl	80020a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003952:	480d      	ldr	r0, [pc, #52]	@ (8003988 <prvInitialiseTaskLists+0x68>)
 8003954:	f7fe fba8 	bl	80020a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003958:	480c      	ldr	r0, [pc, #48]	@ (800398c <prvInitialiseTaskLists+0x6c>)
 800395a:	f7fe fba5 	bl	80020a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800395e:	480c      	ldr	r0, [pc, #48]	@ (8003990 <prvInitialiseTaskLists+0x70>)
 8003960:	f7fe fba2 	bl	80020a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003964:	480b      	ldr	r0, [pc, #44]	@ (8003994 <prvInitialiseTaskLists+0x74>)
 8003966:	f7fe fb9f 	bl	80020a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800396a:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <prvInitialiseTaskLists+0x78>)
 800396c:	4a05      	ldr	r2, [pc, #20]	@ (8003984 <prvInitialiseTaskLists+0x64>)
 800396e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003970:	4b0a      	ldr	r3, [pc, #40]	@ (800399c <prvInitialiseTaskLists+0x7c>)
 8003972:	4a05      	ldr	r2, [pc, #20]	@ (8003988 <prvInitialiseTaskLists+0x68>)
 8003974:	601a      	str	r2, [r3, #0]
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	2000077c 	.word	0x2000077c
 8003984:	20000bdc 	.word	0x20000bdc
 8003988:	20000bf0 	.word	0x20000bf0
 800398c:	20000c0c 	.word	0x20000c0c
 8003990:	20000c20 	.word	0x20000c20
 8003994:	20000c38 	.word	0x20000c38
 8003998:	20000c04 	.word	0x20000c04
 800399c:	20000c08 	.word	0x20000c08

080039a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039a6:	e019      	b.n	80039dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80039a8:	f000 fde6 	bl	8004578 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039ac:	4b10      	ldr	r3, [pc, #64]	@ (80039f0 <prvCheckTasksWaitingTermination+0x50>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe fbff 	bl	80021bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80039be:	4b0d      	ldr	r3, [pc, #52]	@ (80039f4 <prvCheckTasksWaitingTermination+0x54>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	4a0b      	ldr	r2, [pc, #44]	@ (80039f4 <prvCheckTasksWaitingTermination+0x54>)
 80039c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80039c8:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <prvCheckTasksWaitingTermination+0x58>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	4a0a      	ldr	r2, [pc, #40]	@ (80039f8 <prvCheckTasksWaitingTermination+0x58>)
 80039d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80039d2:	f000 fe03 	bl	80045dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f810 	bl	80039fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039dc:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <prvCheckTasksWaitingTermination+0x58>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e1      	bne.n	80039a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000c20 	.word	0x20000c20
 80039f4:	20000c4c 	.word	0x20000c4c
 80039f8:	20000c34 	.word	0x20000c34

080039fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 ffa0 	bl	8004958 <vPortFree>
				vPortFree( pxTCB );
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 ff9d 	bl	8004958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a1e:	e019      	b.n	8003a54 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d103      	bne.n	8003a32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 ff94 	bl	8004958 <vPortFree>
	}
 8003a30:	e010      	b.n	8003a54 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d00b      	beq.n	8003a54 <prvDeleteTCB+0x58>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	60fb      	str	r3, [r7, #12]
}
 8003a4e:	bf00      	nop
 8003a50:	bf00      	nop
 8003a52:	e7fd      	b.n	8003a50 <prvDeleteTCB+0x54>
	}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a62:	4b0c      	ldr	r3, [pc, #48]	@ (8003a94 <prvResetNextTaskUnblockTime+0x38>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a98 <prvResetNextTaskUnblockTime+0x3c>)
 8003a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a74:	e008      	b.n	8003a88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a76:	4b07      	ldr	r3, [pc, #28]	@ (8003a94 <prvResetNextTaskUnblockTime+0x38>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4a04      	ldr	r2, [pc, #16]	@ (8003a98 <prvResetNextTaskUnblockTime+0x3c>)
 8003a86:	6013      	str	r3, [r2, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	20000c04 	.word	0x20000c04
 8003a98:	20000c6c 	.word	0x20000c6c

08003a9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <xTaskGetSchedulerState+0x34>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	e008      	b.n	8003ac2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab0:	4b08      	ldr	r3, [pc, #32]	@ (8003ad4 <xTaskGetSchedulerState+0x38>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e001      	b.n	8003ac2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ac2:	687b      	ldr	r3, [r7, #4]
	}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	20000c58 	.word	0x20000c58
 8003ad4:	20000c74 	.word	0x20000c74

08003ad8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d058      	beq.n	8003ba0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003aee:	4b2f      	ldr	r3, [pc, #188]	@ (8003bac <xTaskPriorityDisinherit+0xd4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d00b      	beq.n	8003b10 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	60fb      	str	r3, [r7, #12]
}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	e7fd      	b.n	8003b0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	60bb      	str	r3, [r7, #8]
}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b34:	1e5a      	subs	r2, r3, #1
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d02c      	beq.n	8003ba0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d128      	bne.n	8003ba0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	3304      	adds	r3, #4
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fb32 	bl	80021bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b70:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb0 <xTaskPriorityDisinherit+0xd8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d903      	bls.n	8003b80 <xTaskPriorityDisinherit+0xa8>
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb0 <xTaskPriorityDisinherit+0xd8>)
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4a09      	ldr	r2, [pc, #36]	@ (8003bb4 <xTaskPriorityDisinherit+0xdc>)
 8003b8e:	441a      	add	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f7fe fab3 	bl	8002102 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ba0:	697b      	ldr	r3, [r7, #20]
	}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000778 	.word	0x20000778
 8003bb0:	20000c54 	.word	0x20000c54
 8003bb4:	2000077c 	.word	0x2000077c

08003bb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003bc2:	4b21      	ldr	r3, [pc, #132]	@ (8003c48 <prvAddCurrentTaskToDelayedList+0x90>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bc8:	4b20      	ldr	r3, [pc, #128]	@ (8003c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe faf4 	bl	80021bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d10a      	bne.n	8003bf2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003be2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3304      	adds	r3, #4
 8003be8:	4619      	mov	r1, r3
 8003bea:	4819      	ldr	r0, [pc, #100]	@ (8003c50 <prvAddCurrentTaskToDelayedList+0x98>)
 8003bec:	f7fe fa89 	bl	8002102 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bf0:	e026      	b.n	8003c40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bfa:	4b14      	ldr	r3, [pc, #80]	@ (8003c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d209      	bcs.n	8003c1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c0a:	4b12      	ldr	r3, [pc, #72]	@ (8003c54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3304      	adds	r3, #4
 8003c14:	4619      	mov	r1, r3
 8003c16:	4610      	mov	r0, r2
 8003c18:	f7fe fa97 	bl	800214a <vListInsert>
}
 8003c1c:	e010      	b.n	8003c40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3304      	adds	r3, #4
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	f7fe fa8d 	bl	800214a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c30:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d202      	bcs.n	8003c40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003c3a:	4a08      	ldr	r2, [pc, #32]	@ (8003c5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6013      	str	r3, [r2, #0]
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20000c50 	.word	0x20000c50
 8003c4c:	20000778 	.word	0x20000778
 8003c50:	20000c38 	.word	0x20000c38
 8003c54:	20000c08 	.word	0x20000c08
 8003c58:	20000c04 	.word	0x20000c04
 8003c5c:	20000c6c 	.word	0x20000c6c

08003c60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	@ 0x28
 8003c64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003c6a:	f000 fb13 	bl	8004294 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <xTimerCreateTimerTask+0x84>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d021      	beq.n	8003cba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c7e:	1d3a      	adds	r2, r7, #4
 8003c80:	f107 0108 	add.w	r1, r7, #8
 8003c84:	f107 030c 	add.w	r3, r7, #12
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe f9f3 	bl	8002074 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	9202      	str	r2, [sp, #8]
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	2302      	movs	r3, #2
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	460a      	mov	r2, r1
 8003ca0:	4911      	ldr	r1, [pc, #68]	@ (8003ce8 <xTimerCreateTimerTask+0x88>)
 8003ca2:	4812      	ldr	r0, [pc, #72]	@ (8003cec <xTimerCreateTimerTask+0x8c>)
 8003ca4:	f7fe ffae 	bl	8002c04 <xTaskCreateStatic>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4a11      	ldr	r2, [pc, #68]	@ (8003cf0 <xTimerCreateTimerTask+0x90>)
 8003cac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003cae:	4b10      	ldr	r3, [pc, #64]	@ (8003cf0 <xTimerCreateTimerTask+0x90>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	613b      	str	r3, [r7, #16]
}
 8003cd2:	bf00      	nop
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003cd8:	697b      	ldr	r3, [r7, #20]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000ca8 	.word	0x20000ca8
 8003ce8:	08004c3c 	.word	0x08004c3c
 8003cec:	08003e2d 	.word	0x08003e2d
 8003cf0:	20000cac 	.word	0x20000cac

08003cf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	@ 0x28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <xTimerGenericCommand+0x30>
	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	623b      	str	r3, [r7, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d24:	4b19      	ldr	r3, [pc, #100]	@ (8003d8c <xTimerGenericCommand+0x98>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d02a      	beq.n	8003d82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b05      	cmp	r3, #5
 8003d3c:	dc18      	bgt.n	8003d70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d3e:	f7ff fead 	bl	8003a9c <xTaskGetSchedulerState>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d109      	bne.n	8003d5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d48:	4b10      	ldr	r3, [pc, #64]	@ (8003d8c <xTimerGenericCommand+0x98>)
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	f107 0110 	add.w	r1, r7, #16
 8003d50:	2300      	movs	r3, #0
 8003d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d54:	f7fe fb66 	bl	8002424 <xQueueGenericSend>
 8003d58:	6278      	str	r0, [r7, #36]	@ 0x24
 8003d5a:	e012      	b.n	8003d82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <xTimerGenericCommand+0x98>)
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	f107 0110 	add.w	r1, r7, #16
 8003d64:	2300      	movs	r3, #0
 8003d66:	2200      	movs	r2, #0
 8003d68:	f7fe fb5c 	bl	8002424 <xQueueGenericSend>
 8003d6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003d6e:	e008      	b.n	8003d82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d70:	4b06      	ldr	r3, [pc, #24]	@ (8003d8c <xTimerGenericCommand+0x98>)
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	f107 0110 	add.w	r1, r7, #16
 8003d78:	2300      	movs	r3, #0
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	f7fe fc54 	bl	8002628 <xQueueGenericSendFromISR>
 8003d80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3728      	adds	r7, #40	@ 0x28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000ca8 	.word	0x20000ca8

08003d90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d9a:	4b23      	ldr	r3, [pc, #140]	@ (8003e28 <prvProcessExpiredTimer+0x98>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	3304      	adds	r3, #4
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fe fa07 	bl	80021bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d023      	beq.n	8003e04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	18d1      	adds	r1, r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	6978      	ldr	r0, [r7, #20]
 8003dca:	f000 f8d5 	bl	8003f78 <prvInsertTimerInActiveList>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d020      	beq.n	8003e16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	2100      	movs	r1, #0
 8003dde:	6978      	ldr	r0, [r7, #20]
 8003de0:	f7ff ff88 	bl	8003cf4 <xTimerGenericCommand>
 8003de4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d114      	bne.n	8003e16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	60fb      	str	r3, [r7, #12]
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	6978      	ldr	r0, [r7, #20]
 8003e1c:	4798      	blx	r3
}
 8003e1e:	bf00      	nop
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000ca0 	.word	0x20000ca0

08003e2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e34:	f107 0308 	add.w	r3, r7, #8
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f859 	bl	8003ef0 <prvGetNextExpireTime>
 8003e3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4619      	mov	r1, r3
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f805 	bl	8003e54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003e4a:	f000 f8d7 	bl	8003ffc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e4e:	bf00      	nop
 8003e50:	e7f0      	b.n	8003e34 <prvTimerTask+0x8>
	...

08003e54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003e5e:	f7ff fa37 	bl	80032d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e62:	f107 0308 	add.w	r3, r7, #8
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f866 	bl	8003f38 <prvSampleTimeNow>
 8003e6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d130      	bne.n	8003ed6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <prvProcessTimerOrBlockTask+0x3c>
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d806      	bhi.n	8003e90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003e82:	f7ff fa33 	bl	80032ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ff81 	bl	8003d90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003e8e:	e024      	b.n	8003eda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d008      	beq.n	8003ea8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e96:	4b13      	ldr	r3, [pc, #76]	@ (8003ee4 <prvProcessTimerOrBlockTask+0x90>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <prvProcessTimerOrBlockTask+0x50>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <prvProcessTimerOrBlockTask+0x52>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee8 <prvProcessTimerOrBlockTask+0x94>)
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f7fe fe71 	bl	8002b9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003eba:	f7ff fa17 	bl	80032ec <xTaskResumeAll>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003ec4:	4b09      	ldr	r3, [pc, #36]	@ (8003eec <prvProcessTimerOrBlockTask+0x98>)
 8003ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	f3bf 8f6f 	isb	sy
}
 8003ed4:	e001      	b.n	8003eda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003ed6:	f7ff fa09 	bl	80032ec <xTaskResumeAll>
}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000ca4 	.word	0x20000ca4
 8003ee8:	20000ca8 	.word	0x20000ca8
 8003eec:	e000ed04 	.word	0xe000ed04

08003ef0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f34 <prvGetNextExpireTime+0x44>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <prvGetNextExpireTime+0x16>
 8003f02:	2201      	movs	r2, #1
 8003f04:	e000      	b.n	8003f08 <prvGetNextExpireTime+0x18>
 8003f06:	2200      	movs	r2, #0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d105      	bne.n	8003f20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f14:	4b07      	ldr	r3, [pc, #28]	@ (8003f34 <prvGetNextExpireTime+0x44>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	e001      	b.n	8003f24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003f24:	68fb      	ldr	r3, [r7, #12]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20000ca0 	.word	0x20000ca0

08003f38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003f40:	f7ff fa72 	bl	8003428 <xTaskGetTickCount>
 8003f44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003f46:	4b0b      	ldr	r3, [pc, #44]	@ (8003f74 <prvSampleTimeNow+0x3c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d205      	bcs.n	8003f5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003f50:	f000 f93a 	bl	80041c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e002      	b.n	8003f62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003f62:	4a04      	ldr	r2, [pc, #16]	@ (8003f74 <prvSampleTimeNow+0x3c>)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003f68:	68fb      	ldr	r3, [r7, #12]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000cb0 	.word	0x20000cb0

08003f78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d812      	bhi.n	8003fc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	1ad2      	subs	r2, r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d302      	bcc.n	8003fb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003fac:	2301      	movs	r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e01b      	b.n	8003fea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003fb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ff4 <prvInsertTimerInActiveList+0x7c>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f7fe f8c4 	bl	800214a <vListInsert>
 8003fc2:	e012      	b.n	8003fea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d206      	bcs.n	8003fda <prvInsertTimerInActiveList+0x62>
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e007      	b.n	8003fea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fda:	4b07      	ldr	r3, [pc, #28]	@ (8003ff8 <prvInsertTimerInActiveList+0x80>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	f7fe f8b0 	bl	800214a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003fea:	697b      	ldr	r3, [r7, #20]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20000ca4 	.word	0x20000ca4
 8003ff8:	20000ca0 	.word	0x20000ca0

08003ffc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08e      	sub	sp, #56	@ 0x38
 8004000:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004002:	e0ce      	b.n	80041a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	da19      	bge.n	800403e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	3304      	adds	r3, #4
 800400e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10b      	bne.n	800402e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	61fb      	str	r3, [r7, #28]
}
 8004028:	bf00      	nop
 800402a:	bf00      	nop
 800402c:	e7fd      	b.n	800402a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800402e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004034:	6850      	ldr	r0, [r2, #4]
 8004036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004038:	6892      	ldr	r2, [r2, #8]
 800403a:	4611      	mov	r1, r2
 800403c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f2c0 80ae 	blt.w	80041a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800404a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d004      	beq.n	800405c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004054:	3304      	adds	r3, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe f8b0 	bl	80021bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800405c:	463b      	mov	r3, r7
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff ff6a 	bl	8003f38 <prvSampleTimeNow>
 8004064:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b09      	cmp	r3, #9
 800406a:	f200 8097 	bhi.w	800419c <prvProcessReceivedCommands+0x1a0>
 800406e:	a201      	add	r2, pc, #4	@ (adr r2, 8004074 <prvProcessReceivedCommands+0x78>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	0800409d 	.word	0x0800409d
 8004078:	0800409d 	.word	0x0800409d
 800407c:	0800409d 	.word	0x0800409d
 8004080:	08004113 	.word	0x08004113
 8004084:	08004127 	.word	0x08004127
 8004088:	08004173 	.word	0x08004173
 800408c:	0800409d 	.word	0x0800409d
 8004090:	0800409d 	.word	0x0800409d
 8004094:	08004113 	.word	0x08004113
 8004098:	08004127 	.word	0x08004127
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800409c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	18d1      	adds	r1, r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040bc:	f7ff ff5c 	bl	8003f78 <prvInsertTimerInActiveList>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d06c      	beq.n	80041a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d061      	beq.n	80041a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	441a      	add	r2, r3
 80040e4:	2300      	movs	r3, #0
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	2300      	movs	r3, #0
 80040ea:	2100      	movs	r1, #0
 80040ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040ee:	f7ff fe01 	bl	8003cf4 <xTimerGenericCommand>
 80040f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d152      	bne.n	80041a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	61bb      	str	r3, [r7, #24]
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	e7fd      	b.n	800410e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004114:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	b2da      	uxtb	r2, r3
 800411e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004120:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004124:	e03d      	b.n	80041a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004128:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	b2da      	uxtb	r2, r3
 8004132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004134:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	617b      	str	r3, [r7, #20]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800415e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004164:	18d1      	adds	r1, r2, r3
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800416a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800416c:	f7ff ff04 	bl	8003f78 <prvInsertTimerInActiveList>
					break;
 8004170:	e017      	b.n	80041a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d103      	bne.n	8004188 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004182:	f000 fbe9 	bl	8004958 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004186:	e00c      	b.n	80041a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004196:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800419a:	e002      	b.n	80041a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800419c:	bf00      	nop
 800419e:	e000      	b.n	80041a2 <prvProcessReceivedCommands+0x1a6>
					break;
 80041a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041a2:	4b08      	ldr	r3, [pc, #32]	@ (80041c4 <prvProcessReceivedCommands+0x1c8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	1d39      	adds	r1, r7, #4
 80041a8:	2200      	movs	r2, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe fada 	bl	8002764 <xQueueReceive>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f47f af26 	bne.w	8004004 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	3730      	adds	r7, #48	@ 0x30
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000ca8 	.word	0x20000ca8

080041c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041ce:	e049      	b.n	8004264 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041d0:	4b2e      	ldr	r3, [pc, #184]	@ (800428c <prvSwitchTimerLists+0xc4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041da:	4b2c      	ldr	r3, [pc, #176]	@ (800428c <prvSwitchTimerLists+0xc4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fd ffe7 	bl	80021bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d02f      	beq.n	8004264 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4413      	add	r3, r2
 800420c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	429a      	cmp	r2, r3
 8004214:	d90e      	bls.n	8004234 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004222:	4b1a      	ldr	r3, [pc, #104]	@ (800428c <prvSwitchTimerLists+0xc4>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3304      	adds	r3, #4
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f7fd ff8c 	bl	800214a <vListInsert>
 8004232:	e017      	b.n	8004264 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004234:	2300      	movs	r3, #0
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2300      	movs	r3, #0
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	2100      	movs	r1, #0
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff fd58 	bl	8003cf4 <xTimerGenericCommand>
 8004244:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10b      	bne.n	8004264 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	603b      	str	r3, [r7, #0]
}
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	e7fd      	b.n	8004260 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004264:	4b09      	ldr	r3, [pc, #36]	@ (800428c <prvSwitchTimerLists+0xc4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1b0      	bne.n	80041d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800426e:	4b07      	ldr	r3, [pc, #28]	@ (800428c <prvSwitchTimerLists+0xc4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004274:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <prvSwitchTimerLists+0xc8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a04      	ldr	r2, [pc, #16]	@ (800428c <prvSwitchTimerLists+0xc4>)
 800427a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800427c:	4a04      	ldr	r2, [pc, #16]	@ (8004290 <prvSwitchTimerLists+0xc8>)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	6013      	str	r3, [r2, #0]
}
 8004282:	bf00      	nop
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000ca0 	.word	0x20000ca0
 8004290:	20000ca4 	.word	0x20000ca4

08004294 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800429a:	f000 f96d 	bl	8004578 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800429e:	4b15      	ldr	r3, [pc, #84]	@ (80042f4 <prvCheckForValidListAndQueue+0x60>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d120      	bne.n	80042e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80042a6:	4814      	ldr	r0, [pc, #80]	@ (80042f8 <prvCheckForValidListAndQueue+0x64>)
 80042a8:	f7fd fefe 	bl	80020a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80042ac:	4813      	ldr	r0, [pc, #76]	@ (80042fc <prvCheckForValidListAndQueue+0x68>)
 80042ae:	f7fd fefb 	bl	80020a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80042b2:	4b13      	ldr	r3, [pc, #76]	@ (8004300 <prvCheckForValidListAndQueue+0x6c>)
 80042b4:	4a10      	ldr	r2, [pc, #64]	@ (80042f8 <prvCheckForValidListAndQueue+0x64>)
 80042b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80042b8:	4b12      	ldr	r3, [pc, #72]	@ (8004304 <prvCheckForValidListAndQueue+0x70>)
 80042ba:	4a10      	ldr	r2, [pc, #64]	@ (80042fc <prvCheckForValidListAndQueue+0x68>)
 80042bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80042be:	2300      	movs	r3, #0
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <prvCheckForValidListAndQueue+0x74>)
 80042c4:	4a11      	ldr	r2, [pc, #68]	@ (800430c <prvCheckForValidListAndQueue+0x78>)
 80042c6:	2110      	movs	r1, #16
 80042c8:	200a      	movs	r0, #10
 80042ca:	f7fe f80b 	bl	80022e4 <xQueueGenericCreateStatic>
 80042ce:	4603      	mov	r3, r0
 80042d0:	4a08      	ldr	r2, [pc, #32]	@ (80042f4 <prvCheckForValidListAndQueue+0x60>)
 80042d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80042d4:	4b07      	ldr	r3, [pc, #28]	@ (80042f4 <prvCheckForValidListAndQueue+0x60>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80042dc:	4b05      	ldr	r3, [pc, #20]	@ (80042f4 <prvCheckForValidListAndQueue+0x60>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	490b      	ldr	r1, [pc, #44]	@ (8004310 <prvCheckForValidListAndQueue+0x7c>)
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe fc30 	bl	8002b48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042e8:	f000 f978 	bl	80045dc <vPortExitCritical>
}
 80042ec:	bf00      	nop
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000ca8 	.word	0x20000ca8
 80042f8:	20000c78 	.word	0x20000c78
 80042fc:	20000c8c 	.word	0x20000c8c
 8004300:	20000ca0 	.word	0x20000ca0
 8004304:	20000ca4 	.word	0x20000ca4
 8004308:	20000d54 	.word	0x20000d54
 800430c:	20000cb4 	.word	0x20000cb4
 8004310:	08004c44 	.word	0x08004c44

08004314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3b04      	subs	r3, #4
 8004324:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800432c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3b04      	subs	r3, #4
 8004332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f023 0201 	bic.w	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3b04      	subs	r3, #4
 8004342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004344:	4a0c      	ldr	r2, [pc, #48]	@ (8004378 <pxPortInitialiseStack+0x64>)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3b14      	subs	r3, #20
 800434e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3b04      	subs	r3, #4
 800435a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f06f 0202 	mvn.w	r2, #2
 8004362:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3b20      	subs	r3, #32
 8004368:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	0800437d 	.word	0x0800437d

0800437c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004382:	2300      	movs	r3, #0
 8004384:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004386:	4b13      	ldr	r3, [pc, #76]	@ (80043d4 <prvTaskExitError+0x58>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438e:	d00b      	beq.n	80043a8 <prvTaskExitError+0x2c>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	60fb      	str	r3, [r7, #12]
}
 80043a2:	bf00      	nop
 80043a4:	bf00      	nop
 80043a6:	e7fd      	b.n	80043a4 <prvTaskExitError+0x28>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	60bb      	str	r3, [r7, #8]
}
 80043ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043bc:	bf00      	nop
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0fc      	beq.n	80043be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000008 	.word	0x20000008
	...

080043e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043e0:	4b07      	ldr	r3, [pc, #28]	@ (8004400 <pxCurrentTCBConst2>)
 80043e2:	6819      	ldr	r1, [r3, #0]
 80043e4:	6808      	ldr	r0, [r1, #0]
 80043e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ea:	f380 8809 	msr	PSP, r0
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f04f 0000 	mov.w	r0, #0
 80043f6:	f380 8811 	msr	BASEPRI, r0
 80043fa:	4770      	bx	lr
 80043fc:	f3af 8000 	nop.w

08004400 <pxCurrentTCBConst2>:
 8004400:	20000778 	.word	0x20000778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop

08004408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004408:	4808      	ldr	r0, [pc, #32]	@ (800442c <prvPortStartFirstTask+0x24>)
 800440a:	6800      	ldr	r0, [r0, #0]
 800440c:	6800      	ldr	r0, [r0, #0]
 800440e:	f380 8808 	msr	MSP, r0
 8004412:	f04f 0000 	mov.w	r0, #0
 8004416:	f380 8814 	msr	CONTROL, r0
 800441a:	b662      	cpsie	i
 800441c:	b661      	cpsie	f
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	df00      	svc	0
 8004428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800442a:	bf00      	nop
 800442c:	e000ed08 	.word	0xe000ed08

08004430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004436:	4b47      	ldr	r3, [pc, #284]	@ (8004554 <xPortStartScheduler+0x124>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a47      	ldr	r2, [pc, #284]	@ (8004558 <xPortStartScheduler+0x128>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d10b      	bne.n	8004458 <xPortStartScheduler+0x28>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	60fb      	str	r3, [r7, #12]
}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004458:	4b3e      	ldr	r3, [pc, #248]	@ (8004554 <xPortStartScheduler+0x124>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a3f      	ldr	r2, [pc, #252]	@ (800455c <xPortStartScheduler+0x12c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d10b      	bne.n	800447a <xPortStartScheduler+0x4a>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	613b      	str	r3, [r7, #16]
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800447a:	4b39      	ldr	r3, [pc, #228]	@ (8004560 <xPortStartScheduler+0x130>)
 800447c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	22ff      	movs	r2, #255	@ 0xff
 800448a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4b31      	ldr	r3, [pc, #196]	@ (8004564 <xPortStartScheduler+0x134>)
 80044a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044a2:	4b31      	ldr	r3, [pc, #196]	@ (8004568 <xPortStartScheduler+0x138>)
 80044a4:	2207      	movs	r2, #7
 80044a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044a8:	e009      	b.n	80044be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80044aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004568 <xPortStartScheduler+0x138>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004568 <xPortStartScheduler+0x138>)
 80044b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c6:	2b80      	cmp	r3, #128	@ 0x80
 80044c8:	d0ef      	beq.n	80044aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044ca:	4b27      	ldr	r3, [pc, #156]	@ (8004568 <xPortStartScheduler+0x138>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f1c3 0307 	rsb	r3, r3, #7
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d00b      	beq.n	80044ee <xPortStartScheduler+0xbe>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	60bb      	str	r3, [r7, #8]
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	e7fd      	b.n	80044ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004568 <xPortStartScheduler+0x138>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004568 <xPortStartScheduler+0x138>)
 80044f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004568 <xPortStartScheduler+0x138>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004500:	4a19      	ldr	r2, [pc, #100]	@ (8004568 <xPortStartScheduler+0x138>)
 8004502:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800450c:	4b17      	ldr	r3, [pc, #92]	@ (800456c <xPortStartScheduler+0x13c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a16      	ldr	r2, [pc, #88]	@ (800456c <xPortStartScheduler+0x13c>)
 8004512:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004516:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004518:	4b14      	ldr	r3, [pc, #80]	@ (800456c <xPortStartScheduler+0x13c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a13      	ldr	r2, [pc, #76]	@ (800456c <xPortStartScheduler+0x13c>)
 800451e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004522:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004524:	f000 f8da 	bl	80046dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004528:	4b11      	ldr	r3, [pc, #68]	@ (8004570 <xPortStartScheduler+0x140>)
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800452e:	f000 f8f9 	bl	8004724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004532:	4b10      	ldr	r3, [pc, #64]	@ (8004574 <xPortStartScheduler+0x144>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a0f      	ldr	r2, [pc, #60]	@ (8004574 <xPortStartScheduler+0x144>)
 8004538:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800453c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800453e:	f7ff ff63 	bl	8004408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004542:	f7ff f83b 	bl	80035bc <vTaskSwitchContext>
	prvTaskExitError();
 8004546:	f7ff ff19 	bl	800437c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	e000ed00 	.word	0xe000ed00
 8004558:	410fc271 	.word	0x410fc271
 800455c:	410fc270 	.word	0x410fc270
 8004560:	e000e400 	.word	0xe000e400
 8004564:	20000da4 	.word	0x20000da4
 8004568:	20000da8 	.word	0x20000da8
 800456c:	e000ed20 	.word	0xe000ed20
 8004570:	20000008 	.word	0x20000008
 8004574:	e000ef34 	.word	0xe000ef34

08004578 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	607b      	str	r3, [r7, #4]
}
 8004590:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004592:	4b10      	ldr	r3, [pc, #64]	@ (80045d4 <vPortEnterCritical+0x5c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3301      	adds	r3, #1
 8004598:	4a0e      	ldr	r2, [pc, #56]	@ (80045d4 <vPortEnterCritical+0x5c>)
 800459a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800459c:	4b0d      	ldr	r3, [pc, #52]	@ (80045d4 <vPortEnterCritical+0x5c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d110      	bne.n	80045c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045a4:	4b0c      	ldr	r3, [pc, #48]	@ (80045d8 <vPortEnterCritical+0x60>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	603b      	str	r3, [r7, #0]
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	e7fd      	b.n	80045c2 <vPortEnterCritical+0x4a>
	}
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000008 	.word	0x20000008
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045e2:	4b12      	ldr	r3, [pc, #72]	@ (800462c <vPortExitCritical+0x50>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10b      	bne.n	8004602 <vPortExitCritical+0x26>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	607b      	str	r3, [r7, #4]
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	e7fd      	b.n	80045fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004602:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <vPortExitCritical+0x50>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3b01      	subs	r3, #1
 8004608:	4a08      	ldr	r2, [pc, #32]	@ (800462c <vPortExitCritical+0x50>)
 800460a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800460c:	4b07      	ldr	r3, [pc, #28]	@ (800462c <vPortExitCritical+0x50>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d105      	bne.n	8004620 <vPortExitCritical+0x44>
 8004614:	2300      	movs	r3, #0
 8004616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f383 8811 	msr	BASEPRI, r3
}
 800461e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	20000008 	.word	0x20000008

08004630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004630:	f3ef 8009 	mrs	r0, PSP
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	4b15      	ldr	r3, [pc, #84]	@ (8004690 <pxCurrentTCBConst>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	f01e 0f10 	tst.w	lr, #16
 8004640:	bf08      	it	eq
 8004642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464a:	6010      	str	r0, [r2, #0]
 800464c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004650:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004654:	f380 8811 	msr	BASEPRI, r0
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f7fe ffac 	bl	80035bc <vTaskSwitchContext>
 8004664:	f04f 0000 	mov.w	r0, #0
 8004668:	f380 8811 	msr	BASEPRI, r0
 800466c:	bc09      	pop	{r0, r3}
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	6808      	ldr	r0, [r1, #0]
 8004672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004676:	f01e 0f10 	tst.w	lr, #16
 800467a:	bf08      	it	eq
 800467c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004680:	f380 8809 	msr	PSP, r0
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	f3af 8000 	nop.w

08004690 <pxCurrentTCBConst>:
 8004690:	20000778 	.word	0x20000778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop

08004698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	607b      	str	r3, [r7, #4]
}
 80046b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046b2:	f7fe fec9 	bl	8003448 <xTaskIncrementTick>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046bc:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <xPortSysTickHandler+0x40>)
 80046be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	2300      	movs	r3, #0
 80046c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	f383 8811 	msr	BASEPRI, r3
}
 80046ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046d0:	bf00      	nop
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004710 <vPortSetupTimerInterrupt+0x34>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <vPortSetupTimerInterrupt+0x38>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004718 <vPortSetupTimerInterrupt+0x3c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0a      	ldr	r2, [pc, #40]	@ (800471c <vPortSetupTimerInterrupt+0x40>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	099b      	lsrs	r3, r3, #6
 80046f8:	4a09      	ldr	r2, [pc, #36]	@ (8004720 <vPortSetupTimerInterrupt+0x44>)
 80046fa:	3b01      	subs	r3, #1
 80046fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046fe:	4b04      	ldr	r3, [pc, #16]	@ (8004710 <vPortSetupTimerInterrupt+0x34>)
 8004700:	2207      	movs	r2, #7
 8004702:	601a      	str	r2, [r3, #0]
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	e000e010 	.word	0xe000e010
 8004714:	e000e018 	.word	0xe000e018
 8004718:	20000000 	.word	0x20000000
 800471c:	10624dd3 	.word	0x10624dd3
 8004720:	e000e014 	.word	0xe000e014

08004724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004724:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004734 <vPortEnableVFP+0x10>
 8004728:	6801      	ldr	r1, [r0, #0]
 800472a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800472e:	6001      	str	r1, [r0, #0]
 8004730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004732:	bf00      	nop
 8004734:	e000ed88 	.word	0xe000ed88

08004738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800473e:	f3ef 8305 	mrs	r3, IPSR
 8004742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b0f      	cmp	r3, #15
 8004748:	d915      	bls.n	8004776 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800474a:	4a18      	ldr	r2, [pc, #96]	@ (80047ac <vPortValidateInterruptPriority+0x74>)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004754:	4b16      	ldr	r3, [pc, #88]	@ (80047b0 <vPortValidateInterruptPriority+0x78>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	7afa      	ldrb	r2, [r7, #11]
 800475a:	429a      	cmp	r2, r3
 800475c:	d20b      	bcs.n	8004776 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	607b      	str	r3, [r7, #4]
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	e7fd      	b.n	8004772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004776:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <vPortValidateInterruptPriority+0x7c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800477e:	4b0e      	ldr	r3, [pc, #56]	@ (80047b8 <vPortValidateInterruptPriority+0x80>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d90b      	bls.n	800479e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	603b      	str	r3, [r7, #0]
}
 8004798:	bf00      	nop
 800479a:	bf00      	nop
 800479c:	e7fd      	b.n	800479a <vPortValidateInterruptPriority+0x62>
	}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	e000e3f0 	.word	0xe000e3f0
 80047b0:	20000da4 	.word	0x20000da4
 80047b4:	e000ed0c 	.word	0xe000ed0c
 80047b8:	20000da8 	.word	0x20000da8

080047bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	@ 0x28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047c8:	f7fe fd82 	bl	80032d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047cc:	4b5c      	ldr	r3, [pc, #368]	@ (8004940 <pvPortMalloc+0x184>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047d4:	f000 f924 	bl	8004a20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047d8:	4b5a      	ldr	r3, [pc, #360]	@ (8004944 <pvPortMalloc+0x188>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f040 8095 	bne.w	8004910 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01e      	beq.n	800482a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80047ec:	2208      	movs	r2, #8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d015      	beq.n	800482a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f023 0307 	bic.w	r3, r3, #7
 8004804:	3308      	adds	r3, #8
 8004806:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <pvPortMalloc+0x6e>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	617b      	str	r3, [r7, #20]
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d06f      	beq.n	8004910 <pvPortMalloc+0x154>
 8004830:	4b45      	ldr	r3, [pc, #276]	@ (8004948 <pvPortMalloc+0x18c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	429a      	cmp	r2, r3
 8004838:	d86a      	bhi.n	8004910 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800483a:	4b44      	ldr	r3, [pc, #272]	@ (800494c <pvPortMalloc+0x190>)
 800483c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800483e:	4b43      	ldr	r3, [pc, #268]	@ (800494c <pvPortMalloc+0x190>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004844:	e004      	b.n	8004850 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	429a      	cmp	r2, r3
 8004858:	d903      	bls.n	8004862 <pvPortMalloc+0xa6>
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f1      	bne.n	8004846 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004862:	4b37      	ldr	r3, [pc, #220]	@ (8004940 <pvPortMalloc+0x184>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004868:	429a      	cmp	r2, r3
 800486a:	d051      	beq.n	8004910 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2208      	movs	r2, #8
 8004872:	4413      	add	r3, r2
 8004874:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	1ad2      	subs	r2, r2, r3
 8004886:	2308      	movs	r3, #8
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	429a      	cmp	r2, r3
 800488c:	d920      	bls.n	80048d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800488e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4413      	add	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <pvPortMalloc+0xfc>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	613b      	str	r3, [r7, #16]
}
 80048b2:	bf00      	nop
 80048b4:	bf00      	nop
 80048b6:	e7fd      	b.n	80048b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	1ad2      	subs	r2, r2, r3
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048ca:	69b8      	ldr	r0, [r7, #24]
 80048cc:	f000 f90a 	bl	8004ae4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004948 <pvPortMalloc+0x18c>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	4a1b      	ldr	r2, [pc, #108]	@ (8004948 <pvPortMalloc+0x18c>)
 80048dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048de:	4b1a      	ldr	r3, [pc, #104]	@ (8004948 <pvPortMalloc+0x18c>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004950 <pvPortMalloc+0x194>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d203      	bcs.n	80048f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048ea:	4b17      	ldr	r3, [pc, #92]	@ (8004948 <pvPortMalloc+0x18c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a18      	ldr	r2, [pc, #96]	@ (8004950 <pvPortMalloc+0x194>)
 80048f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	4b13      	ldr	r3, [pc, #76]	@ (8004944 <pvPortMalloc+0x188>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004906:	4b13      	ldr	r3, [pc, #76]	@ (8004954 <pvPortMalloc+0x198>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3301      	adds	r3, #1
 800490c:	4a11      	ldr	r2, [pc, #68]	@ (8004954 <pvPortMalloc+0x198>)
 800490e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004910:	f7fe fcec 	bl	80032ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00b      	beq.n	8004936 <pvPortMalloc+0x17a>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	60fb      	str	r3, [r7, #12]
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	e7fd      	b.n	8004932 <pvPortMalloc+0x176>
	return pvReturn;
 8004936:	69fb      	ldr	r3, [r7, #28]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3728      	adds	r7, #40	@ 0x28
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	200049b4 	.word	0x200049b4
 8004944:	200049c8 	.word	0x200049c8
 8004948:	200049b8 	.word	0x200049b8
 800494c:	200049ac 	.word	0x200049ac
 8004950:	200049bc 	.word	0x200049bc
 8004954:	200049c0 	.word	0x200049c0

08004958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d04f      	beq.n	8004a0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800496a:	2308      	movs	r3, #8
 800496c:	425b      	negs	r3, r3
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4413      	add	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	4b25      	ldr	r3, [pc, #148]	@ (8004a14 <vPortFree+0xbc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10b      	bne.n	800499e <vPortFree+0x46>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	60fb      	str	r3, [r7, #12]
}
 8004998:	bf00      	nop
 800499a:	bf00      	nop
 800499c:	e7fd      	b.n	800499a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00b      	beq.n	80049be <vPortFree+0x66>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	60bb      	str	r3, [r7, #8]
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	e7fd      	b.n	80049ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	4b14      	ldr	r3, [pc, #80]	@ (8004a14 <vPortFree+0xbc>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01e      	beq.n	8004a0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d11a      	bne.n	8004a0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a14 <vPortFree+0xbc>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	43db      	mvns	r3, r3
 80049de:	401a      	ands	r2, r3
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049e4:	f7fe fc74 	bl	80032d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <vPortFree+0xc0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4413      	add	r3, r2
 80049f2:	4a09      	ldr	r2, [pc, #36]	@ (8004a18 <vPortFree+0xc0>)
 80049f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049f6:	6938      	ldr	r0, [r7, #16]
 80049f8:	f000 f874 	bl	8004ae4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80049fc:	4b07      	ldr	r3, [pc, #28]	@ (8004a1c <vPortFree+0xc4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	4a06      	ldr	r2, [pc, #24]	@ (8004a1c <vPortFree+0xc4>)
 8004a04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a06:	f7fe fc71 	bl	80032ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a0a:	bf00      	nop
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	200049c8 	.word	0x200049c8
 8004a18:	200049b8 	.word	0x200049b8
 8004a1c:	200049c4 	.word	0x200049c4

08004a20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004a2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a2c:	4b27      	ldr	r3, [pc, #156]	@ (8004acc <prvHeapInit+0xac>)
 8004a2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3307      	adds	r3, #7
 8004a3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0307 	bic.w	r3, r3, #7
 8004a46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004acc <prvHeapInit+0xac>)
 8004a50:	4413      	add	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a58:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad0 <prvHeapInit+0xb0>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ad0 <prvHeapInit+0xb0>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	4413      	add	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0307 	bic.w	r3, r3, #7
 8004a7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4a15      	ldr	r2, [pc, #84]	@ (8004ad4 <prvHeapInit+0xb4>)
 8004a80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a82:	4b14      	ldr	r3, [pc, #80]	@ (8004ad4 <prvHeapInit+0xb4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2200      	movs	r2, #0
 8004a88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a8a:	4b12      	ldr	r3, [pc, #72]	@ (8004ad4 <prvHeapInit+0xb4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	1ad2      	subs	r2, r2, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad4 <prvHeapInit+0xb4>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad8 <prvHeapInit+0xb8>)
 8004aae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a09      	ldr	r2, [pc, #36]	@ (8004adc <prvHeapInit+0xbc>)
 8004ab6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ab8:	4b09      	ldr	r3, [pc, #36]	@ (8004ae0 <prvHeapInit+0xc0>)
 8004aba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004abe:	601a      	str	r2, [r3, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	20000dac 	.word	0x20000dac
 8004ad0:	200049ac 	.word	0x200049ac
 8004ad4:	200049b4 	.word	0x200049b4
 8004ad8:	200049bc 	.word	0x200049bc
 8004adc:	200049b8 	.word	0x200049b8
 8004ae0:	200049c8 	.word	0x200049c8

08004ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004aec:	4b28      	ldr	r3, [pc, #160]	@ (8004b90 <prvInsertBlockIntoFreeList+0xac>)
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e002      	b.n	8004af8 <prvInsertBlockIntoFreeList+0x14>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d8f7      	bhi.n	8004af2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d108      	bne.n	8004b26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	441a      	add	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	441a      	add	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d118      	bne.n	8004b6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b15      	ldr	r3, [pc, #84]	@ (8004b94 <prvInsertBlockIntoFreeList+0xb0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d00d      	beq.n	8004b62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	441a      	add	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e008      	b.n	8004b74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b62:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <prvInsertBlockIntoFreeList+0xb0>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e003      	b.n	8004b74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d002      	beq.n	8004b82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	200049ac 	.word	0x200049ac
 8004b94:	200049b4 	.word	0x200049b4

08004b98 <memset>:
 8004b98:	4402      	add	r2, r0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d100      	bne.n	8004ba2 <memset+0xa>
 8004ba0:	4770      	bx	lr
 8004ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba6:	e7f9      	b.n	8004b9c <memset+0x4>

08004ba8 <__libc_init_array>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	4d0d      	ldr	r5, [pc, #52]	@ (8004be0 <__libc_init_array+0x38>)
 8004bac:	4c0d      	ldr	r4, [pc, #52]	@ (8004be4 <__libc_init_array+0x3c>)
 8004bae:	1b64      	subs	r4, r4, r5
 8004bb0:	10a4      	asrs	r4, r4, #2
 8004bb2:	2600      	movs	r6, #0
 8004bb4:	42a6      	cmp	r6, r4
 8004bb6:	d109      	bne.n	8004bcc <__libc_init_array+0x24>
 8004bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8004be8 <__libc_init_array+0x40>)
 8004bba:	4c0c      	ldr	r4, [pc, #48]	@ (8004bec <__libc_init_array+0x44>)
 8004bbc:	f000 f826 	bl	8004c0c <_init>
 8004bc0:	1b64      	subs	r4, r4, r5
 8004bc2:	10a4      	asrs	r4, r4, #2
 8004bc4:	2600      	movs	r6, #0
 8004bc6:	42a6      	cmp	r6, r4
 8004bc8:	d105      	bne.n	8004bd6 <__libc_init_array+0x2e>
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
 8004bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd0:	4798      	blx	r3
 8004bd2:	3601      	adds	r6, #1
 8004bd4:	e7ee      	b.n	8004bb4 <__libc_init_array+0xc>
 8004bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bda:	4798      	blx	r3
 8004bdc:	3601      	adds	r6, #1
 8004bde:	e7f2      	b.n	8004bc6 <__libc_init_array+0x1e>
 8004be0:	08004cb4 	.word	0x08004cb4
 8004be4:	08004cb4 	.word	0x08004cb4
 8004be8:	08004cb4 	.word	0x08004cb4
 8004bec:	08004cb8 	.word	0x08004cb8

08004bf0 <memcpy>:
 8004bf0:	440a      	add	r2, r1
 8004bf2:	4291      	cmp	r1, r2
 8004bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bf8:	d100      	bne.n	8004bfc <memcpy+0xc>
 8004bfa:	4770      	bx	lr
 8004bfc:	b510      	push	{r4, lr}
 8004bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c06:	4291      	cmp	r1, r2
 8004c08:	d1f9      	bne.n	8004bfe <memcpy+0xe>
 8004c0a:	bd10      	pop	{r4, pc}

08004c0c <_init>:
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0e:	bf00      	nop
 8004c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c12:	bc08      	pop	{r3}
 8004c14:	469e      	mov	lr, r3
 8004c16:	4770      	bx	lr

08004c18 <_fini>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	bf00      	nop
 8004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1e:	bc08      	pop	{r3}
 8004c20:	469e      	mov	lr, r3
 8004c22:	4770      	bx	lr
